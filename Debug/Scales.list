
Scales.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a27c  0800a27c  000201bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a27c  0800a27c  000201bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a27c  0800a27c  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  0800a284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  200001bc  0800a440  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800a440  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145cc  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003894  00000000  00000000  000347b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b97b  00000000  00000000  0003a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aba  00000000  00000000  00055ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa96  00000000  00000000  0006d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd32b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ac  00000000  00000000  000fd37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001bc 	.word	0x200001bc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a114 	.word	0x0800a114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c0 	.word	0x200001c0
 8000148:	0800a114 	.word	0x0800a114

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 ffdf 	bl	8001132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fff8 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 ffd7 	bl	8001132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fff0 	bl	800116a <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b30      	ldr	r3, [pc, #192]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a2f      	ldr	r2, [pc, #188]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b2d      	ldr	r3, [pc, #180]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b2a      	ldr	r3, [pc, #168]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a29      	ldr	r2, [pc, #164]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a23      	ldr	r2, [pc, #140]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <MX_GPIO_Init+0xd8>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_GPIO_Init+0xd8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4818      	ldr	r0, [pc, #96]	; (8000274 <MX_GPIO_Init+0xdc>)
 8000214:	f001 fb58 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	2301      	movs	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000226:	2302      	movs	r3, #2
 8000228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	4810      	ldr	r0, [pc, #64]	; (8000274 <MX_GPIO_Init+0xdc>)
 8000232:	f001 f9c5 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIN_1_Pin|DIN_2_Pin|DIN_3_Pin|DIN_4_Pin;
 8000236:	2378      	movs	r3, #120	; 0x78
 8000238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <MX_GPIO_Init+0xe0>)
 800024a:	f001 f9b9 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDIN_Pin;
 800024e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025c:	f107 0310 	add.w	r3, r7, #16
 8000260:	4619      	mov	r1, r3
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <MX_GPIO_Init+0xe0>)
 8000264:	f001 f9ac 	bl	80015c0 <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3720      	adds	r7, #32
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000
 8000274:	40011000 	.word	0x40011000
 8000278:	40010800 	.word	0x40010800

0800027c <keyboard_sendReport>:
extern USBD_HandleTypeDef hUsbDeviceFS;

KeyReport_t _keyReport;

void keyboard_sendReport(KeyReport_t *keys)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  uint8_t buf[8] = { keys->modifiers, keys->reserved, keys->keys[0], keys->keys[1], keys->keys[2], keys->keys[3], keys->keys[4], keys->keys[5] };
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	723b      	strb	r3, [r7, #8]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	727b      	strb	r3, [r7, #9]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	72bb      	strb	r3, [r7, #10]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	78db      	ldrb	r3, [r3, #3]
 800029a:	72fb      	strb	r3, [r7, #11]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	791b      	ldrb	r3, [r3, #4]
 80002a0:	733b      	strb	r3, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	795b      	ldrb	r3, [r3, #5]
 80002a6:	737b      	strb	r3, [r7, #13]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	799b      	ldrb	r3, [r3, #6]
 80002ac:	73bb      	strb	r3, [r7, #14]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	79db      	ldrb	r3, [r3, #7]
 80002b2:	73fb      	strb	r3, [r7, #15]
  USBD_HID_SendReport(&hUsbDeviceFS, buf, 8);
 80002b4:	f107 0308 	add.w	r3, r7, #8
 80002b8:	2208      	movs	r2, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <keyboard_sendReport+0x54>)
 80002be:	f007 fdbf 	bl	8007e40 <USBD_HID_SendReport>
  HAL_Delay(20);
 80002c2:	2014      	movs	r0, #20
 80002c4:	f000 fe3a 	bl	8000f3c <HAL_Delay>
}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000374 	.word	0x20000374

080002d4 <keyboard_press>:
  0x35 | SHIFT,  // ~
  0       // DEL
};

uint16_t keyboard_press(uint8_t k)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  if (k >= 136) {     // it's a non-printing key (not a modifier)
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b87      	cmp	r3, #135	; 0x87
 80002e2:	d903      	bls.n	80002ec <keyboard_press+0x18>
    k = k - 136;
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	3378      	adds	r3, #120	; 0x78
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	e02c      	b.n	8000346 <keyboard_press+0x72>
  } else if (k >= 128) {  // it's a modifier key
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da10      	bge.n	8000316 <keyboard_press+0x42>
    _keyReport.modifiers |= (1 << (k - 128));
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <keyboard_press+0xf4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b25a      	sxtb	r2, r3
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	3b80      	subs	r3, #128	; 0x80
 80002fe:	2101      	movs	r1, #1
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	b25b      	sxtb	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b25b      	sxtb	r3, r3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <keyboard_press+0xf4>)
 800030e:	701a      	strb	r2, [r3, #0]
    k = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	e017      	b.n	8000346 <keyboard_press+0x72>
  } else {        // it's a printing key
    k = _asciimap[k];
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	4a2c      	ldr	r2, [pc, #176]	; (80003cc <keyboard_press+0xf8>)
 800031a:	5cd3      	ldrb	r3, [r2, r3]
 800031c:	71fb      	strb	r3, [r7, #7]
    if (!k) {
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <keyboard_press+0x54>
//      setWriteError();
      return 0;
 8000324:	2300      	movs	r3, #0
 8000326:	e04a      	b.n	80003be <keyboard_press+0xea>
    }
    if (k & 0x80) {           // it's a capital letter or other character reached with shift
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	da0a      	bge.n	8000346 <keyboard_press+0x72>
      _keyReport.modifiers |= 0x02; // the left shift modifier
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <keyboard_press+0xf4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <keyboard_press+0xf4>)
 800033c:	701a      	strb	r2, [r3, #0]
      k &= 0x7F;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000344:	71fb      	strb	r3, [r7, #7]
    }
  }

  // Add k to the key report only if it's not already present
  // and if there is an empty slot.
  if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <keyboard_press+0xf4>)
 8000348:	789b      	ldrb	r3, [r3, #2]
 800034a:	79fa      	ldrb	r2, [r7, #7]
 800034c:	429a      	cmp	r2, r3
 800034e:	d032      	beq.n	80003b6 <keyboard_press+0xe2>
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <keyboard_press+0xf4>)
 8000352:	78db      	ldrb	r3, [r3, #3]
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	429a      	cmp	r2, r3
 8000358:	d02d      	beq.n	80003b6 <keyboard_press+0xe2>
      _keyReport.keys[2] != k && _keyReport.keys[3] != k &&
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <keyboard_press+0xf4>)
 800035c:	791b      	ldrb	r3, [r3, #4]
  if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	429a      	cmp	r2, r3
 8000362:	d028      	beq.n	80003b6 <keyboard_press+0xe2>
      _keyReport.keys[2] != k && _keyReport.keys[3] != k &&
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <keyboard_press+0xf4>)
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	79fa      	ldrb	r2, [r7, #7]
 800036a:	429a      	cmp	r2, r3
 800036c:	d023      	beq.n	80003b6 <keyboard_press+0xe2>
      _keyReport.keys[4] != k && _keyReport.keys[5] != k) {
 800036e:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <keyboard_press+0xf4>)
 8000370:	799b      	ldrb	r3, [r3, #6]
      _keyReport.keys[2] != k && _keyReport.keys[3] != k &&
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	429a      	cmp	r2, r3
 8000376:	d01e      	beq.n	80003b6 <keyboard_press+0xe2>
      _keyReport.keys[4] != k && _keyReport.keys[5] != k) {
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <keyboard_press+0xf4>)
 800037a:	79db      	ldrb	r3, [r3, #7]
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	429a      	cmp	r2, r3
 8000380:	d019      	beq.n	80003b6 <keyboard_press+0xe2>

    for (i = 0; i < 6; i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e00e      	b.n	80003a6 <keyboard_press+0xd2>
      if (_keyReport.keys[i] == 0x00) {
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <keyboard_press+0xf4>)
 800038c:	4413      	add	r3, r2
 800038e:	789b      	ldrb	r3, [r3, #2]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d105      	bne.n	80003a0 <keyboard_press+0xcc>
        _keyReport.keys[i] = k;
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <keyboard_press+0xf4>)
 8000398:	4413      	add	r3, r2
 800039a:	79fa      	ldrb	r2, [r7, #7]
 800039c:	709a      	strb	r2, [r3, #2]
        break;
 800039e:	e005      	b.n	80003ac <keyboard_press+0xd8>
    for (i = 0; i < 6; i++) {
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3301      	adds	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d9ed      	bls.n	8000388 <keyboard_press+0xb4>
      }
    }
    if (i == 6) {
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d101      	bne.n	80003b6 <keyboard_press+0xe2>
//      setWriteError();
      return 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	e003      	b.n	80003be <keyboard_press+0xea>
    }
  }
  keyboard_sendReport(&_keyReport);
 80003b6:	4804      	ldr	r0, [pc, #16]	; (80003c8 <keyboard_press+0xf4>)
 80003b8:	f7ff ff60 	bl	800027c <keyboard_sendReport>
  return 1;
 80003bc:	2301      	movs	r3, #1
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200001d8 	.word	0x200001d8
 80003cc:	0800a1b0 	.word	0x0800a1b0

080003d0 <keyboard_release>:

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
uint16_t keyboard_release(uint8_t k)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  if (k >= 136) {     // it's a non-printing key (not a modifier)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b87      	cmp	r3, #135	; 0x87
 80003de:	d903      	bls.n	80003e8 <keyboard_release+0x18>
    k = k - 136;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	3378      	adds	r3, #120	; 0x78
 80003e4:	71fb      	strb	r3, [r7, #7]
 80003e6:	e02e      	b.n	8000446 <keyboard_release+0x76>
  } else if (k >= 128) {  // it's a modifier key
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	da12      	bge.n	8000416 <keyboard_release+0x46>
    _keyReport.modifiers &= ~(1 << (k - 128));
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <keyboard_release+0xb8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b25a      	sxtb	r2, r3
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3b80      	subs	r3, #128	; 0x80
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	b25b      	sxtb	r3, r3
 8000402:	43db      	mvns	r3, r3
 8000404:	b25b      	sxtb	r3, r3
 8000406:	4013      	ands	r3, r2
 8000408:	b25b      	sxtb	r3, r3
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <keyboard_release+0xb8>)
 800040e:	701a      	strb	r2, [r3, #0]
    k = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	e017      	b.n	8000446 <keyboard_release+0x76>
  } else {        // it's a printing key
    k = _asciimap[k];
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a1c      	ldr	r2, [pc, #112]	; (800048c <keyboard_release+0xbc>)
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	71fb      	strb	r3, [r7, #7]
    if (!k) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d101      	bne.n	8000428 <keyboard_release+0x58>
      return 0;
 8000424:	2300      	movs	r3, #0
 8000426:	e02a      	b.n	800047e <keyboard_release+0xae>
    }
    if (k & 0x80) {             // it's a capital letter or other character reached with shift
 8000428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	da0a      	bge.n	8000446 <keyboard_release+0x76>
      _keyReport.modifiers &= ~(0x02);  // the left shift modifier
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <keyboard_release+0xb8>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	f023 0302 	bic.w	r3, r3, #2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <keyboard_release+0xb8>)
 800043c:	701a      	strb	r2, [r3, #0]
      k &= 0x7F;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000444:	71fb      	strb	r3, [r7, #7]
    }
  }

  // Test the key report to see if k is present.  Clear it if it exists.
  // Check all positions in case the key is present more than once (which it shouldn't be)
  for (i = 0; i < 6; i++) {
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e011      	b.n	8000470 <keyboard_release+0xa0>
    if (0 != k && _keyReport.keys[i] == k) {
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00b      	beq.n	800046a <keyboard_release+0x9a>
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <keyboard_release+0xb8>)
 8000456:	4413      	add	r3, r2
 8000458:	789b      	ldrb	r3, [r3, #2]
 800045a:	79fa      	ldrb	r2, [r7, #7]
 800045c:	429a      	cmp	r2, r3
 800045e:	d104      	bne.n	800046a <keyboard_release+0x9a>
      _keyReport.keys[i] = 0x00;
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	4a09      	ldr	r2, [pc, #36]	; (8000488 <keyboard_release+0xb8>)
 8000464:	4413      	add	r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	709a      	strb	r2, [r3, #2]
  for (i = 0; i < 6; i++) {
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	3301      	adds	r3, #1
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	2b05      	cmp	r3, #5
 8000474:	d9ea      	bls.n	800044c <keyboard_release+0x7c>
    }
  }

  keyboard_sendReport(&_keyReport);
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <keyboard_release+0xb8>)
 8000478:	f7ff ff00 	bl	800027c <keyboard_sendReport>
  return 1;
 800047c:	2301      	movs	r3, #1
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200001d8 	.word	0x200001d8
 800048c:	0800a1b0 	.word	0x0800a1b0

08000490 <keyboard_write>:
  _keyReport.modifiers = 0;
  keyboard_sendReport(&_keyReport);
}

uint16_t keyboard_write(uint8_t c)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  uint8_t p = keyboard_press(c);  // Keydown
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff19 	bl	80002d4 <keyboard_press>
 80004a2:	4603      	mov	r3, r0
 80004a4:	73fb      	strb	r3, [r7, #15]
  keyboard_release(c);            // Keyup
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff91 	bl	80003d0 <keyboard_release>
  return p;              // just return the result of press() since release() almost always returns 1
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	b29b      	uxth	r3, r3
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <keyboard_print>:

void keyboard_print(uint8_t *keys, uint16_t len)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < len; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	81fb      	strh	r3, [r7, #14]
 80004ca:	e009      	b.n	80004e0 <keyboard_print+0x26>
		keyboard_write(keys[i]);
 80004cc:	89fb      	ldrh	r3, [r7, #14]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffdb 	bl	8000490 <keyboard_write>
	for (uint16_t i = 0; i < len; i++)
 80004da:	89fb      	ldrh	r3, [r7, #14]
 80004dc:	3301      	adds	r3, #1
 80004de:	81fb      	strh	r3, [r7, #14]
 80004e0:	89fa      	ldrh	r2, [r7, #14]
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3f1      	bcc.n	80004cc <keyboard_print+0x12>
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a26      	ldr	r2, [pc, #152]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d144      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x9a>
		if ((SCLK_GPIO_Port->IDR & SCLK_Pin) != 0) {
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00d      	beq.n	800052c <HAL_TIM_PeriodElapsedCallback+0x38>
			if (data_index)
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d002      	beq.n	800051e <HAL_TIM_PeriodElapsedCallback+0x2a>
				data_new = 1;
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
			data_index = 0;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
			data_nex_bit = 0;
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
				data_byte = 0;
				data_index++;
			}
		}
	}
}
 800052a:	e030      	b.n	800058e <HAL_TIM_PeriodElapsedCallback+0x9a>
			if ((SDIN_GPIO_Port->IDR & SDIN_Pin) != 0)
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00d      	beq.n	8000554 <HAL_TIM_PeriodElapsedCallback+0x60>
				data_byte |= (1 << data_nex_bit);
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	4093      	lsls	r3, r2
 8000542:	b25a      	sxtb	r2, r3
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b25b      	sxtb	r3, r3
 800054a:	4313      	orrs	r3, r2
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000552:	701a      	strb	r2, [r3, #0]
			data_nex_bit++;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800055e:	701a      	strb	r2, [r3, #0]
			if (data_nex_bit > 7) {
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b07      	cmp	r3, #7
 8000566:	d912      	bls.n	800058e <HAL_TIM_PeriodElapsedCallback+0x9a>
				data_nex_bit = 0;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
				data_buff[data_index] = data_byte;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000576:	7819      	ldrb	r1, [r3, #0]
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800057a:	5499      	strb	r1, [r3, r2]
				data_byte = 0;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
				data_index++;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800058c:	701a      	strb	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000258 	.word	0x20000258
 800059c:	40010800 	.word	0x40010800
 80005a0:	200001f9 	.word	0x200001f9
 80005a4:	200001fb 	.word	0x200001fb
 80005a8:	200001f8 	.word	0x200001f8
 80005ac:	200001fa 	.word	0x200001fa
 80005b0:	200001e0 	.word	0x200001e0

080005b4 <get7sigNum>:
uint8_t get7sigNum(uint8_t byte)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ibyte = byte & 0b11111011;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 0304 	bic.w	r3, r3, #4
 80005c4:	73fb      	strb	r3, [r7, #15]
	if (ibyte == 0b10000001)
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b81      	cmp	r3, #129	; 0x81
 80005ca:	d101      	bne.n	80005d0 <get7sigNum+0x1c>
		return 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e02d      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b11101010)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2bea      	cmp	r3, #234	; 0xea
 80005d4:	d101      	bne.n	80005da <get7sigNum+0x26>
		return 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	e028      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b11100011)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2be3      	cmp	r3, #227	; 0xe3
 80005de:	d101      	bne.n	80005e4 <get7sigNum+0x30>
		return 3;
 80005e0:	2303      	movs	r3, #3
 80005e2:	e023      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b11010001)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2bd1      	cmp	r3, #209	; 0xd1
 80005e8:	d101      	bne.n	80005ee <get7sigNum+0x3a>
		return 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	e01e      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b01110011)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b73      	cmp	r3, #115	; 0x73
 80005f2:	d101      	bne.n	80005f8 <get7sigNum+0x44>
		return 5;
 80005f4:	2305      	movs	r3, #5
 80005f6:	e019      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b01111011)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b7b      	cmp	r3, #123	; 0x7b
 80005fc:	d101      	bne.n	8000602 <get7sigNum+0x4e>
		return 6;
 80005fe:	2306      	movs	r3, #6
 8000600:	e014      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b10100001)
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2ba1      	cmp	r3, #161	; 0xa1
 8000606:	d101      	bne.n	800060c <get7sigNum+0x58>
		return 7;
 8000608:	2307      	movs	r3, #7
 800060a:	e00f      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b11111011)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2bfb      	cmp	r3, #251	; 0xfb
 8000610:	d101      	bne.n	8000616 <get7sigNum+0x62>
		return 8;
 8000612:	2308      	movs	r3, #8
 8000614:	e00a      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b11110011)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2bf3      	cmp	r3, #243	; 0xf3
 800061a:	d101      	bne.n	8000620 <get7sigNum+0x6c>
		return 9;
 800061c:	2309      	movs	r3, #9
 800061e:	e005      	b.n	800062c <get7sigNum+0x78>
	if (ibyte == 0b10111011)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2bbb      	cmp	r3, #187	; 0xbb
 8000624:	d101      	bne.n	800062a <get7sigNum+0x76>
		return 0;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <get7sigNum+0x78>
	return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	b097      	sub	sp, #92	; 0x5c
 800063c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fc1b 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f92d 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f7ff fda7 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 800064a:	f7ff fd7f 	bl	800014c <MX_DMA_Init>
  MX_TIM1_Init();
 800064e:	f000 fa4f 	bl	8000af0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fb09 	bl	8000c68 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000656:	f008 fce3 	bl	8009020 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800065a:	4886      	ldr	r0, [pc, #536]	; (8000874 <main+0x23c>)
 800065c:	f003 fb32 	bl	8003cc4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (data_new) {
 8000660:	4b85      	ldr	r3, [pc, #532]	; (8000878 <main+0x240>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0fb      	beq.n	8000660 <main+0x28>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4883      	ldr	r0, [pc, #524]	; (800087c <main+0x244>)
 800066e:	f001 f943 	bl	80018f8 <HAL_GPIO_TogglePin>
		data_new = 0;
 8000672:	4b81      	ldr	r3, [pc, #516]	; (8000878 <main+0x240>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]

		mass_buff[0] = get7sigNum(data_buff[1]);
 8000678:	4b81      	ldr	r3, [pc, #516]	; (8000880 <main+0x248>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff99 	bl	80005b4 <get7sigNum>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <main+0x24c>)
 8000688:	701a      	strb	r2, [r3, #0]
		mass_buff[1] = get7sigNum(data_buff[2]);
 800068a:	4b7d      	ldr	r3, [pc, #500]	; (8000880 <main+0x248>)
 800068c:	789b      	ldrb	r3, [r3, #2]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff90 	bl	80005b4 <get7sigNum>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b7a      	ldr	r3, [pc, #488]	; (8000884 <main+0x24c>)
 800069a:	705a      	strb	r2, [r3, #1]
		mass_buff[2] = get7sigNum(data_buff[3]);
 800069c:	4b78      	ldr	r3, [pc, #480]	; (8000880 <main+0x248>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff87 	bl	80005b4 <get7sigNum>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b76      	ldr	r3, [pc, #472]	; (8000884 <main+0x24c>)
 80006ac:	709a      	strb	r2, [r3, #2]
		mass_buff[3] = get7sigNum(data_buff[4]);
 80006ae:	4b74      	ldr	r3, [pc, #464]	; (8000880 <main+0x248>)
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff7e 	bl	80005b4 <get7sigNum>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b71      	ldr	r3, [pc, #452]	; (8000884 <main+0x24c>)
 80006be:	70da      	strb	r2, [r3, #3]
		mass_buff[4] = get7sigNum(data_buff[5]);
 80006c0:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <main+0x248>)
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff75 	bl	80005b4 <get7sigNum>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <main+0x24c>)
 80006d0:	711a      	strb	r2, [r3, #4]

		price_buff[0] = get7sigNum(data_buff[6]);
 80006d2:	4b6b      	ldr	r3, [pc, #428]	; (8000880 <main+0x248>)
 80006d4:	799b      	ldrb	r3, [r3, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff6c 	bl	80005b4 <get7sigNum>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b69      	ldr	r3, [pc, #420]	; (8000888 <main+0x250>)
 80006e2:	701a      	strb	r2, [r3, #0]
		price_buff[1] = get7sigNum(data_buff[7]);
 80006e4:	4b66      	ldr	r3, [pc, #408]	; (8000880 <main+0x248>)
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff63 	bl	80005b4 <get7sigNum>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b65      	ldr	r3, [pc, #404]	; (8000888 <main+0x250>)
 80006f4:	705a      	strb	r2, [r3, #1]
		price_buff[2] = get7sigNum(data_buff[8]);
 80006f6:	4b62      	ldr	r3, [pc, #392]	; (8000880 <main+0x248>)
 80006f8:	7a1b      	ldrb	r3, [r3, #8]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff5a 	bl	80005b4 <get7sigNum>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b60      	ldr	r3, [pc, #384]	; (8000888 <main+0x250>)
 8000706:	709a      	strb	r2, [r3, #2]
		price_buff[3] = get7sigNum(data_buff[9]);
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x248>)
 800070a:	7a5b      	ldrb	r3, [r3, #9]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff51 	bl	80005b4 <get7sigNum>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <main+0x250>)
 8000718:	70da      	strb	r2, [r3, #3]
		price_buff[4] = get7sigNum(data_buff[10]);
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <main+0x248>)
 800071c:	7a9b      	ldrb	r3, [r3, #10]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff48 	bl	80005b4 <get7sigNum>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b57      	ldr	r3, [pc, #348]	; (8000888 <main+0x250>)
 800072a:	711a      	strb	r2, [r3, #4]

		amount_buff[0] = get7sigNum(data_buff[11]);
 800072c:	4b54      	ldr	r3, [pc, #336]	; (8000880 <main+0x248>)
 800072e:	7adb      	ldrb	r3, [r3, #11]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff3f 	bl	80005b4 <get7sigNum>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b54      	ldr	r3, [pc, #336]	; (800088c <main+0x254>)
 800073c:	701a      	strb	r2, [r3, #0]
		amount_buff[1] = get7sigNum(data_buff[12]);
 800073e:	4b50      	ldr	r3, [pc, #320]	; (8000880 <main+0x248>)
 8000740:	7b1b      	ldrb	r3, [r3, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff36 	bl	80005b4 <get7sigNum>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b4f      	ldr	r3, [pc, #316]	; (800088c <main+0x254>)
 800074e:	705a      	strb	r2, [r3, #1]
		amount_buff[2] = get7sigNum(data_buff[13]);
 8000750:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <main+0x248>)
 8000752:	7b5b      	ldrb	r3, [r3, #13]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff2d 	bl	80005b4 <get7sigNum>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <main+0x254>)
 8000760:	709a      	strb	r2, [r3, #2]
		amount_buff[3] = get7sigNum(data_buff[14]);
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <main+0x248>)
 8000764:	7b9b      	ldrb	r3, [r3, #14]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff24 	bl	80005b4 <get7sigNum>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b46      	ldr	r3, [pc, #280]	; (800088c <main+0x254>)
 8000772:	70da      	strb	r2, [r3, #3]
		amount_buff[4] = get7sigNum(data_buff[15]);
 8000774:	4b42      	ldr	r3, [pc, #264]	; (8000880 <main+0x248>)
 8000776:	7bdb      	ldrb	r3, [r3, #15]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff1b 	bl	80005b4 <get7sigNum>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <main+0x254>)
 8000784:	711a      	strb	r2, [r3, #4]
		amount_buff[5] = get7sigNum(data_buff[16]);
 8000786:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <main+0x248>)
 8000788:	7c1b      	ldrb	r3, [r3, #16]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff12 	bl	80005b4 <get7sigNum>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b3d      	ldr	r3, [pc, #244]	; (800088c <main+0x254>)
 8000796:	715a      	strb	r2, [r3, #5]


		sprintf((char *)send_buff, \
				"%d%d,%d%d%d - %d%d%d,%d%d - %d%d%d%d,%d%d\n\r", \
				mass_buff[0], \
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <main+0x24c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
		sprintf((char *)send_buff, \
 800079c:	469c      	mov	ip, r3
				mass_buff[1], \
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <main+0x24c>)
 80007a0:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)send_buff, \
 80007a2:	469e      	mov	lr, r3
				mass_buff[2], \
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x24c>)
 80007a6:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)send_buff, \
 80007a8:	4618      	mov	r0, r3
				mass_buff[3], \
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <main+0x24c>)
 80007ac:	78db      	ldrb	r3, [r3, #3]
		sprintf((char *)send_buff, \
 80007ae:	461c      	mov	r4, r3
				mass_buff[4], \
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <main+0x24c>)
 80007b2:	791b      	ldrb	r3, [r3, #4]
		sprintf((char *)send_buff, \
 80007b4:	461d      	mov	r5, r3

				price_buff[0], \
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <main+0x250>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
		sprintf((char *)send_buff, \
 80007ba:	461e      	mov	r6, r3
				price_buff[1], \
 80007bc:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0x250>)
 80007be:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)send_buff, \
 80007c0:	61fb      	str	r3, [r7, #28]
				price_buff[2], \
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <main+0x250>)
 80007c4:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)send_buff, \
 80007c6:	61bb      	str	r3, [r7, #24]
				price_buff[3], \
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <main+0x250>)
 80007ca:	78db      	ldrb	r3, [r3, #3]
		sprintf((char *)send_buff, \
 80007cc:	617b      	str	r3, [r7, #20]
				price_buff[4], \
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <main+0x250>)
 80007d0:	791b      	ldrb	r3, [r3, #4]
		sprintf((char *)send_buff, \
 80007d2:	613b      	str	r3, [r7, #16]

				amount_buff[0], \
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <main+0x254>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
		sprintf((char *)send_buff, \
 80007d8:	60fb      	str	r3, [r7, #12]
				amount_buff[1], \
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <main+0x254>)
 80007dc:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)send_buff, \
 80007de:	60bb      	str	r3, [r7, #8]
				amount_buff[2], \
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <main+0x254>)
 80007e2:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)send_buff, \
 80007e4:	607b      	str	r3, [r7, #4]
				amount_buff[3], \
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <main+0x254>)
 80007e8:	78db      	ldrb	r3, [r3, #3]
		sprintf((char *)send_buff, \
 80007ea:	4619      	mov	r1, r3
				amount_buff[4], \
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <main+0x254>)
 80007ee:	791b      	ldrb	r3, [r3, #4]
		sprintf((char *)send_buff, \
 80007f0:	461a      	mov	r2, r3
				amount_buff[5] );
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <main+0x254>)
 80007f4:	795b      	ldrb	r3, [r3, #5]
		sprintf((char *)send_buff, \
 80007f6:	930d      	str	r3, [sp, #52]	; 0x34
 80007f8:	920c      	str	r2, [sp, #48]	; 0x30
 80007fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	920a      	str	r2, [sp, #40]	; 0x28
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	9209      	str	r2, [sp, #36]	; 0x24
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	9208      	str	r2, [sp, #32]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	9207      	str	r2, [sp, #28]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	9206      	str	r2, [sp, #24]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	9205      	str	r2, [sp, #20]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	9304      	str	r3, [sp, #16]
 8000818:	9603      	str	r6, [sp, #12]
 800081a:	9502      	str	r5, [sp, #8]
 800081c:	9401      	str	r4, [sp, #4]
 800081e:	9000      	str	r0, [sp, #0]
 8000820:	4673      	mov	r3, lr
 8000822:	4662      	mov	r2, ip
 8000824:	491a      	ldr	r1, [pc, #104]	; (8000890 <main+0x258>)
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <main+0x25c>)
 8000828:	f008 ffe6 	bl	80097f8 <siprintf>

		if (strncmp((const char *)send_buff, (const char *)last_send_buff, 28) != 0) {
 800082c:	221c      	movs	r2, #28
 800082e:	491a      	ldr	r1, [pc, #104]	; (8000898 <main+0x260>)
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <main+0x25c>)
 8000832:	f009 f801 	bl	8009838 <strncmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	f43f af11 	beq.w	8000660 <main+0x28>
			HAL_UART_Transmit(&huart1, send_buff, 28, 1000);
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	221c      	movs	r2, #28
 8000844:	4913      	ldr	r1, [pc, #76]	; (8000894 <main+0x25c>)
 8000846:	4815      	ldr	r0, [pc, #84]	; (800089c <main+0x264>)
 8000848:	f003 ff5d 	bl	8004706 <HAL_UART_Transmit>
			keyboard_print(send_buff, 28);
 800084c:	211c      	movs	r1, #28
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <main+0x25c>)
 8000850:	f7ff fe33 	bl	80004ba <keyboard_print>
			memcpy(last_send_buff, send_buff, sizeof(last_send_buff));
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <main+0x260>)
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <main+0x25c>)
 8000858:	4614      	mov	r4, r2
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_Delay(500);
 8000868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086c:	f000 fb66 	bl	8000f3c <HAL_Delay>
	  if (data_new) {
 8000870:	e6f6      	b.n	8000660 <main+0x28>
 8000872:	bf00      	nop
 8000874:	20000258 	.word	0x20000258
 8000878:	200001fb 	.word	0x200001fb
 800087c:	40011000 	.word	0x40011000
 8000880:	200001e0 	.word	0x200001e0
 8000884:	2000023c 	.word	0x2000023c
 8000888:	20000244 	.word	0x20000244
 800088c:	2000024c 	.word	0x2000024c
 8000890:	0800a12c 	.word	0x0800a12c
 8000894:	200001fc 	.word	0x200001fc
 8000898:	2000021c 	.word	0x2000021c
 800089c:	200002a0 	.word	0x200002a0

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	; 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f008 ff9a 	bl	80097e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fcc4 	bl	8003284 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000902:	f000 f827 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2102      	movs	r1, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ff30 	bl	8003788 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800092e:	f000 f811 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000932:	2310      	movs	r3, #16
 8000934:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f8bb 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000948:	f000 f804 	bl	8000954 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_MspInit+0x5c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_MspInit+0x5c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_MspInit+0x5c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x5c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x5c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x5c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_MspInit+0x60>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_MspInit+0x60>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010000 	.word	0x40010000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 fa7b 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <DMA1_Channel4_IRQHandler+0x10>)
 8000a1a:	f000 fccb 	bl	80013b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200002e4 	.word	0x200002e4

08000a28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Channel5_IRQHandler+0x10>)
 8000a2e:	f000 fcc1 	bl	80013b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000328 	.word	0x20000328

08000a3c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a42:	f001 f8a3 	bl	8001b8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000838 	.word	0x20000838

08000a50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM1_UP_IRQHandler+0x10>)
 8000a56:	f003 f9e0 	bl	8003e1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000258 	.word	0x20000258

08000a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART1_IRQHandler+0x10>)
 8000a6a:	f003 fedf 	bl	800482c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200002a0 	.word	0x200002a0

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f008 fe74 	bl	8009794 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20005000 	.word	0x20005000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000254 	.word	0x20000254
 8000ae0:	20000b48 	.word	0x20000b48

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <MX_TIM1_Init+0xe4>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 215;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b30:	22d7      	movs	r2, #215	; 0xd7
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b48:	f003 f86c 	bl	8003c24 <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b52:	f7ff feff 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	4619      	mov	r1, r3
 8000b62:	481b      	ldr	r0, [pc, #108]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b64:	f003 fa61 	bl	800402a <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b6e:	f7ff fef1 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b72:	2108      	movs	r1, #8
 8000b74:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b76:	f003 f8f7 	bl	8003d68 <HAL_TIM_OnePulse_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b80:	f7ff fee8 	bl	8000954 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b84:	2306      	movs	r3, #6
 8000b86:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b88:	2350      	movs	r3, #80	; 0x50
 8000b8a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000b9c:	f003 fb09 	bl	80041b2 <HAL_TIM_SlaveConfigSynchro>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000ba6:	f7ff fed5 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_TIM1_Init+0xe0>)
 8000bb8:	f003 fce8 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000bc2:	f7ff fec7 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	; 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000258 	.word	0x20000258
 8000bd4:	40012c00 	.word	0x40012c00

08000bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <HAL_TIM_Base_MspInit+0x84>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d12c      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000bfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SCLK_IT_Pin;
 8000c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SCLK_IT_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_TIM_Base_MspInit+0x8c>)
 8000c3e:	f000 fcbf 	bl	80015c0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2019      	movs	r0, #25
 8000c48:	f000 fa73 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c4c:	2019      	movs	r0, #25
 8000c4e:	f000 fa8c 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012c00 	.word	0x40012c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART1_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	f003 fce4 	bl	800466c <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f7ff fe53 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002a0 	.word	0x200002a0
 8000cb8:	40013800 	.word	0x40013800

08000cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a4d      	ldr	r2, [pc, #308]	; (8000e0c <HAL_UART_MspInit+0x150>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f040 8092 	bne.w	8000e02 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cde:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a4b      	ldr	r2, [pc, #300]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <HAL_UART_MspInit+0x154>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	483c      	ldr	r0, [pc, #240]	; (8000e14 <HAL_UART_MspInit+0x158>)
 8000d22:	f000 fc4d 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4836      	ldr	r0, [pc, #216]	; (8000e14 <HAL_UART_MspInit+0x158>)
 8000d3a:	f000 fc41 	bl	80015c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d3e:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <HAL_UART_MspInit+0x15c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <HAL_UART_MspInit+0x15c>)
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d5c:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <HAL_UART_MspInit+0x164>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d62:	2210      	movs	r2, #16
 8000d64:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d8a:	4824      	ldr	r0, [pc, #144]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d8c:	f000 fa08 	bl	80011a0 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000d96:	f7ff fddd 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_UART_MspInit+0x160>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <HAL_UART_MspInit+0x16c>)
 8000daa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dd8:	f000 f9e2 	bl	80011a0 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000de2:	f7ff fdb7 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_UART_MspInit+0x168>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2025      	movs	r0, #37	; 0x25
 8000df8:	f000 f99b 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dfc:	2025      	movs	r0, #37	; 0x25
 8000dfe:	f000 f9b4 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	200002e4 	.word	0x200002e4
 8000e20:	40020044 	.word	0x40020044
 8000e24:	20000328 	.word	0x20000328
 8000e28:	40020058 	.word	0x40020058

08000e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e52:	f7ff fe47 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f008 fca3 	bl	80097a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fbed 	bl	8000638 <main>
  bx lr
 8000e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8000e68:	0800a284 	.word	0x0800a284
  ldr r2, =_sbss
 8000e6c:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8000e70:	20000b48 	.word	0x20000b48

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x28>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f947 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fd64 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f95f 	bl	8001186 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f927 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <HAL_IncTick+0x20>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000008 	.word	0x20000008
 8000f24:	2000036c 	.word	0x2000036c

08000f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	2000036c 	.word	0x2000036c

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff fff0 	bl	8000f28 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffe0 	bl	8000f28 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff2d 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff42 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff35 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e043      	b.n	800123e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_DMA_Init+0xa8>)
 80011be:	4413      	add	r3, r2
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <HAL_DMA_Init+0xac>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	009a      	lsls	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_DMA_Init+0xb0>)
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	bffdfff8 	.word	0xbffdfff8
 800124c:	cccccccd 	.word	0xcccccccd
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001266:	2b02      	cmp	r3, #2
 8001268:	d008      	beq.n	800127c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2204      	movs	r2, #4
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e020      	b.n	80012be <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 020e 	bic.w	r2, r2, #14
 800128a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d005      	beq.n	80012ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2204      	movs	r2, #4
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e051      	b.n	800138e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 020e 	bic.w	r2, r2, #14
 80012f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_DMA_Abort_IT+0xd0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d029      	beq.n	8001368 <HAL_DMA_Abort_IT+0xa0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <HAL_DMA_Abort_IT+0xd4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d022      	beq.n	8001364 <HAL_DMA_Abort_IT+0x9c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_DMA_Abort_IT+0xd8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d01a      	beq.n	800135e <HAL_DMA_Abort_IT+0x96>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_DMA_Abort_IT+0xdc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d012      	beq.n	8001358 <HAL_DMA_Abort_IT+0x90>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_DMA_Abort_IT+0xe0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00a      	beq.n	8001352 <HAL_DMA_Abort_IT+0x8a>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_DMA_Abort_IT+0xe4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d102      	bne.n	800134c <HAL_DMA_Abort_IT+0x84>
 8001346:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800134a:	e00e      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 800134c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001350:	e00b      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 8001352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001356:	e008      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	e005      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	e002      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 8001364:	2310      	movs	r3, #16
 8001366:	e000      	b.n	800136a <HAL_DMA_Abort_IT+0xa2>
 8001368:	2301      	movs	r3, #1
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_DMA_Abort_IT+0xe8>)
 800136c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
    } 
  }
  return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40020008 	.word	0x40020008
 800139c:	4002001c 	.word	0x4002001c
 80013a0:	40020030 	.word	0x40020030
 80013a4:	40020044 	.word	0x40020044
 80013a8:	40020058 	.word	0x40020058
 80013ac:	4002006c 	.word	0x4002006c
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	2204      	movs	r2, #4
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d04f      	beq.n	800147c <HAL_DMA_IRQHandler+0xc8>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d04a      	beq.n	800147c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d107      	bne.n	8001404 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0204 	bic.w	r2, r2, #4
 8001402:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a66      	ldr	r2, [pc, #408]	; (80015a4 <HAL_DMA_IRQHandler+0x1f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d029      	beq.n	8001462 <HAL_DMA_IRQHandler+0xae>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d022      	beq.n	800145e <HAL_DMA_IRQHandler+0xaa>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a63      	ldr	r2, [pc, #396]	; (80015ac <HAL_DMA_IRQHandler+0x1f8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01a      	beq.n	8001458 <HAL_DMA_IRQHandler+0xa4>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a62      	ldr	r2, [pc, #392]	; (80015b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d012      	beq.n	8001452 <HAL_DMA_IRQHandler+0x9e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a60      	ldr	r2, [pc, #384]	; (80015b4 <HAL_DMA_IRQHandler+0x200>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00a      	beq.n	800144c <HAL_DMA_IRQHandler+0x98>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_DMA_IRQHandler+0x204>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <HAL_DMA_IRQHandler+0x92>
 8001440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001444:	e00e      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 8001446:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800144a:	e00b      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 800144c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001450:	e008      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 8001452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001456:	e005      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 8001458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145c:	e002      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	e000      	b.n	8001464 <HAL_DMA_IRQHandler+0xb0>
 8001462:	2304      	movs	r3, #4
 8001464:	4a55      	ldr	r2, [pc, #340]	; (80015bc <HAL_DMA_IRQHandler+0x208>)
 8001466:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8094 	beq.w	800159a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800147a:	e08e      	b.n	800159a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	2202      	movs	r2, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d056      	beq.n	800153a <HAL_DMA_IRQHandler+0x186>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d051      	beq.n	800153a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10b      	bne.n	80014bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020a 	bic.w	r2, r2, #10
 80014b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_DMA_IRQHandler+0x1f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d029      	beq.n	800151a <HAL_DMA_IRQHandler+0x166>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a37      	ldr	r2, [pc, #220]	; (80015a8 <HAL_DMA_IRQHandler+0x1f4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_IRQHandler+0x162>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a35      	ldr	r2, [pc, #212]	; (80015ac <HAL_DMA_IRQHandler+0x1f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x15c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a34      	ldr	r2, [pc, #208]	; (80015b0 <HAL_DMA_IRQHandler+0x1fc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d012      	beq.n	800150a <HAL_DMA_IRQHandler+0x156>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_DMA_IRQHandler+0x200>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x150>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <HAL_DMA_IRQHandler+0x204>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d102      	bne.n	80014fe <HAL_DMA_IRQHandler+0x14a>
 80014f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014fc:	e00e      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 80014fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001502:	e00b      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 8001504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001508:	e008      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	e005      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	e002      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 8001516:	2320      	movs	r3, #32
 8001518:	e000      	b.n	800151c <HAL_DMA_IRQHandler+0x168>
 800151a:	2302      	movs	r3, #2
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <HAL_DMA_IRQHandler+0x208>)
 800151e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	2b00      	cmp	r3, #0
 800152e:	d034      	beq.n	800159a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001538:	e02f      	b.n	800159a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2208      	movs	r2, #8
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d028      	beq.n	800159c <HAL_DMA_IRQHandler+0x1e8>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d023      	beq.n	800159c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
    }
  }
  return;
 800159a:	bf00      	nop
 800159c:	bf00      	nop
}
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020008 	.word	0x40020008
 80015a8:	4002001c 	.word	0x4002001c
 80015ac:	40020030 	.word	0x40020030
 80015b0:	40020044 	.word	0x40020044
 80015b4:	40020058 	.word	0x40020058
 80015b8:	4002006c 	.word	0x4002006c
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e169      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d4:	2201      	movs	r2, #1
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8158 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d05e      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 80015fc:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d875      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001602:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d058      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001608:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d86f      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800160e:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d052      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001614:	4a94      	ldr	r2, [pc, #592]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d869      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800161a:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04c      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001620:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_GPIO_Init+0x2ac>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d863      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001626:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d046      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 800162c:	4a90      	ldr	r2, [pc, #576]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d85d      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d82a      	bhi.n	800168c <HAL_GPIO_Init+0xcc>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d859      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_GPIO_Init+0x80>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	080016bb 	.word	0x080016bb
 8001644:	08001695 	.word	0x08001695
 8001648:	080016a7 	.word	0x080016a7
 800164c:	080016e9 	.word	0x080016e9
 8001650:	080016ef 	.word	0x080016ef
 8001654:	080016ef 	.word	0x080016ef
 8001658:	080016ef 	.word	0x080016ef
 800165c:	080016ef 	.word	0x080016ef
 8001660:	080016ef 	.word	0x080016ef
 8001664:	080016ef 	.word	0x080016ef
 8001668:	080016ef 	.word	0x080016ef
 800166c:	080016ef 	.word	0x080016ef
 8001670:	080016ef 	.word	0x080016ef
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016ef 	.word	0x080016ef
 800167c:	080016ef 	.word	0x080016ef
 8001680:	080016ef 	.word	0x080016ef
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016b1 	.word	0x080016b1
 800168c:	4a79      	ldr	r2, [pc, #484]	; (8001874 <HAL_GPIO_Init+0x2b4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001692:	e02c      	b.n	80016ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e029      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	3304      	adds	r3, #4
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e024      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	3308      	adds	r3, #8
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e01f      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	330c      	adds	r3, #12
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e01a      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c2:	2304      	movs	r3, #4
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e013      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
          break;
 80016da:	e009      	b.n	80016f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	615a      	str	r2, [r3, #20]
          break;
 80016e6:	e003      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          break;
 80016ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d801      	bhi.n	80016fa <HAL_GPIO_Init+0x13a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	e001      	b.n	80016fe <HAL_GPIO_Init+0x13e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d802      	bhi.n	800170c <HAL_GPIO_Init+0x14c>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x152>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3b08      	subs	r3, #8
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	210f      	movs	r1, #15
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80b1 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2bc>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_GPIO_Init+0x2c0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1ec>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1e8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3e      	ldr	r2, [pc, #248]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1e4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1e0>
 800179c:	2303      	movs	r3, #3
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017ac:	2300      	movs	r3, #0
 80017ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017be:	492f      	ldr	r1, [pc, #188]	; (800187c <HAL_GPIO_Init+0x2bc>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	492c      	ldr	r1, [pc, #176]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4928      	ldr	r1, [pc, #160]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4918      	ldr	r1, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4914      	ldr	r1, [pc, #80]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x2e2>
 800185e:	bf00      	nop
 8001860:	10320000 	.word	0x10320000
 8001864:	10310000 	.word	0x10310000
 8001868:	10220000 	.word	0x10220000
 800186c:	10210000 	.word	0x10210000
 8001870:	10120000 	.word	0x10120000
 8001874:	10110000 	.word	0x10110000
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000
 8001880:	40010800 	.word	0x40010800
 8001884:	40010c00 	.word	0x40010c00
 8001888:	40011000 	.word	0x40011000
 800188c:	40011400 	.word	0x40011400
 8001890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	43db      	mvns	r3, r3
 800189c:	4909      	ldr	r1, [pc, #36]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800189e:	4013      	ands	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f ae8e 	bne.w	80015d4 <HAL_GPIO_Init+0x14>
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	372c      	adds	r7, #44	; 0x2c
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43d9      	mvns	r1, r3
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	400b      	ands	r3, r1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	611a      	str	r2, [r3, #16]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192c:	b08b      	sub	sp, #44	; 0x2c
 800192e:	af06      	add	r7, sp, #24
 8001930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0fd      	b.n	8001b38 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d106      	bne.n	8001956 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f007 fc99 	bl	8009288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fb80 	bl	8005068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	687e      	ldr	r6, [r7, #4]
 8001970:	466d      	mov	r5, sp
 8001972:	f106 0410 	add.w	r4, r6, #16
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	1d33      	adds	r3, r6, #4
 8001980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f003 fb4a 	bl	800501c <USB_CoreInit>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0ce      	b.n	8001b38 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fb7b 	bl	800509c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e04c      	b.n	8001a46 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3301      	adds	r3, #1
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b298      	uxth	r0, r3
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3336      	adds	r3, #54	; 0x36
 80019ea:	4602      	mov	r2, r0
 80019ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3303      	adds	r3, #3
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3338      	adds	r3, #56	; 0x38
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333c      	adds	r3, #60	; 0x3c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3340      	adds	r3, #64	; 0x40
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3ad      	bcc.n	80019ac <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e044      	b.n	8001ae0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3b5      	bcc.n	8001a56 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	687e      	ldr	r6, [r7, #4]
 8001af2:	466d      	mov	r5, sp
 8001af4:	f106 0410 	add.w	r4, r6, #16
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	602b      	str	r3, [r5, #0]
 8001b00:	1d33      	adds	r3, r6, #4
 8001b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f003 fad5 	bl	80050b4 <USB_DevInit>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00d      	b.n	8001b38 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f005 ff87 	bl	8007a44 <USB_DevDisconnect>

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_Start+0x16>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e016      	b.n	8001b84 <HAL_PCD_Start+0x44>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fa6a 	bl	800503c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f007 fddb 	bl	8009726 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 ff5b 	bl	8007a30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 ff5d 	bl	8007a58 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fb48 	bl	8002240 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 ff4f 	bl	8007a58 <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d112      	bne.n	8001bec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f007 fbcd 	bl	800937e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f923 	bl	8001e32 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f005 ff31 	bl	8007a58 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c00:	d10b      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c14:	b292      	uxth	r2, r2
 8001c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 ff1a 	bl	8007a58 <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2e:	d10b      	bne.n	8001c48 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 ff03 	bl	8007a58 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5c:	d126      	bne.n	8001cac <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0204 	bic.w	r2, r2, #4
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f007 fbae 	bl	80093f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fed1 	bl	8007a58 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc0:	f040 8082 	bne.w	8001dc8 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
 8001cc8:	e010      	b.n	8001cec <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	441a      	add	r2, r3
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	8812      	ldrh	r2, [r2, #0]
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3320      	adds	r3, #32
 8001ce0:	443b      	add	r3, r7
 8001ce2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	77fb      	strb	r3, [r7, #31]
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
 8001cee:	2b07      	cmp	r3, #7
 8001cf0:	d9eb      	bls.n	8001cca <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d22:	bf00      	nop
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f6      	beq.n	8001d24 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	77fb      	strb	r3, [r7, #31]
 8001d52:	e00f      	b.n	8001d74 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	7ffa      	ldrb	r2, [r7, #31]
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	440a      	add	r2, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	3320      	adds	r3, #32
 8001d66:	443b      	add	r3, r7
 8001d68:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d6c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	3301      	adds	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	d9ec      	bls.n	8001d54 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0208 	orr.w	r2, r2, #8
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da4:	b292      	uxth	r2, r2
 8001da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0204 	orr.w	r2, r2, #4
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f007 fafa 	bl	80093bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fe43 	bl	8007a58 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ddc:	d10e      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f007 fab3 	bl	8009362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 fe29 	bl	8007a58 <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e10:	d10b      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e24:	b292      	uxth	r2, r2
 8001e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_SetAddress+0x1a>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e013      	b.n	8001e74 <HAL_PCD_SetAddress+0x42>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f005 fdd0 	bl	8007a0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	70fb      	strb	r3, [r7, #3]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	803b      	strh	r3, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da0e      	bge.n	8001ec0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	705a      	strb	r2, [r3, #1]
 8001ebe:	e00e      	b.n	8001ede <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 0207 	and.w	r2, r3, #7
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eea:	883a      	ldrh	r2, [r7, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	78ba      	ldrb	r2, [r7, #2]
 8001ef4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d102      	bne.n	8001f14 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_EP_Open+0xa6>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e00e      	b.n	8001f40 <HAL_PCD_EP_Open+0xc4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f8df 	bl	80050f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da0e      	bge.n	8001f7a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	705a      	strb	r2, [r3, #1]
 8001f78:	e00e      	b.n	8001f98 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 0207 	and.w	r2, r3, #7
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_EP_Close+0x6a>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e00e      	b.n	8001fd0 <HAL_PCD_EP_Close+0x88>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fc01 	bl	80057c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	f003 0207 	and.w	r2, r3, #7
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	b2da      	uxtb	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fdb3 	bl	8005ba0 <USB_EPStartXfer>
 800203a:	e005      	b.n	8002048 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fdac 	bl	8005ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	460b      	mov	r3, r1
 8002060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fd70 	bl	8005ba0 <USB_EPStartXfer>
 80020c0:	e005      	b.n	80020ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fd69 	bl	8005ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 0207 	and.w	r2, r3, #7
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e04c      	b.n	8002190 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0e      	bge.n	800211c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	e00c      	b.n	8002136 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_PCD_EP_SetStall+0x7e>
 8002152:	2302      	movs	r3, #2
 8002154:	e01c      	b.n	8002190 <HAL_PCD_EP_SetStall+0xb8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f005 fb53 	bl	8007810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f005 fc78 	bl	8007a76 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d901      	bls.n	80021b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e040      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da0e      	bge.n	80021dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
 80021da:	e00e      	b.n	80021fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_ClrStall+0x82>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_ClrStall+0xa0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f005 fb41 	bl	80078b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	; 0x38
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002248:	e2ec      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002252:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 8161 	bne.w	800252c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800226a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d152      	bne.n	800231a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002284:	81fb      	strh	r3, [r7, #14]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002294:	b29b      	uxth	r3, r3
 8002296:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3328      	adds	r3, #40	; 0x28
 800229c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	3302      	adds	r3, #2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	441a      	add	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f007 f827 	bl	800932e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 829b 	beq.w	8002824 <PCD_EP_ISR_Handler+0x5e4>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8296 	bne.w	8002824 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002304:	b2da      	uxtb	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002318:	e284      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800232a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800232c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002330:	2b00      	cmp	r3, #0
 8002332:	d034      	beq.n	800239e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	3306      	adds	r3, #6
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002372:	b29b      	uxth	r3, r3
 8002374:	f005 fbcf 	bl	8007b16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29a      	uxth	r2, r3
 8002380:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002384:	4013      	ands	r3, r2
 8002386:	823b      	strh	r3, [r7, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	8a3a      	ldrh	r2, [r7, #16]
 800238e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002392:	b292      	uxth	r2, r2
 8002394:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 ff9c 	bl	80092d4 <HAL_PCD_SetupStageCallback>
 800239c:	e242      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800239e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f280 823e 	bge.w	8002824 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b4:	4013      	ands	r3, r2
 80023b6:	83bb      	strh	r3, [r7, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	8bba      	ldrh	r2, [r7, #28]
 80023be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c2:	b292      	uxth	r2, r2
 80023c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3306      	adds	r3, #6
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d019      	beq.n	800242e <PCD_EP_ISR_Handler+0x1ee>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002412:	b29b      	uxth	r3, r3
 8002414:	f005 fb7f 	bl	8007b16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	441a      	add	r2, r3
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f006 ff65 	bl	80092f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 81f2 	bne.w	8002824 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d112      	bne.n	800248e <PCD_EP_ISR_Handler+0x24e>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002472:	b29a      	uxth	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e02f      	b.n	80024ee <PCD_EP_ISR_Handler+0x2ae>
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b3e      	cmp	r3, #62	; 0x3e
 8002494:	d813      	bhi.n	80024be <PCD_EP_ISR_Handler+0x27e>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x270>
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	3301      	adds	r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e017      	b.n	80024ee <PCD_EP_ISR_Handler+0x2ae>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <PCD_EP_ISR_Handler+0x298>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	3b01      	subs	r3, #1
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	b29b      	uxth	r3, r3
 80024dc:	029b      	lsls	r3, r3, #10
 80024de:	b29b      	uxth	r3, r3
 80024e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fe:	827b      	strh	r3, [r7, #18]
 8002500:	8a7b      	ldrh	r3, [r7, #18]
 8002502:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002506:	827b      	strh	r3, [r7, #18]
 8002508:	8a7b      	ldrh	r3, [r7, #18]
 800250a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800250e:	827b      	strh	r3, [r7, #18]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	8a7b      	ldrh	r3, [r7, #18]
 8002516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002526:	b29b      	uxth	r3, r3
 8002528:	8013      	strh	r3, [r2, #0]
 800252a:	e17b      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800253e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002542:	2b00      	cmp	r3, #0
 8002544:	f280 80ea 	bge.w	800271c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29a      	uxth	r2, r3
 800255a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800255e:	4013      	ands	r3, r2
 8002560:	853b      	strh	r3, [r7, #40]	; 0x28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002576:	b292      	uxth	r2, r2
 8002578:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800257a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	7b1b      	ldrb	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d122      	bne.n	80025de <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3306      	adds	r3, #6
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8087 	beq.w	80026d8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	6959      	ldr	r1, [r3, #20]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	88da      	ldrh	r2, [r3, #6]
 80025d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d8:	f005 fa9d 	bl	8007b16 <USB_ReadPMA>
 80025dc:	e07c      	b.n	80026d8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	78db      	ldrb	r3, [r3, #3]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d108      	bne.n	80025f8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025e8:	461a      	mov	r2, r3
 80025ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f927 	bl	8002840 <HAL_PCD_EP_DB_Receive>
 80025f2:	4603      	mov	r3, r0
 80025f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025f6:	e06f      	b.n	80026d8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	847b      	strh	r3, [r7, #34]	; 0x22
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002634:	b29b      	uxth	r3, r3
 8002636:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d021      	beq.n	8002696 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	3302      	adds	r3, #2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800267c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02a      	beq.n	80026d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	6959      	ldr	r1, [r3, #20]
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	891a      	ldrh	r2, [r3, #8]
 800268e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002690:	f005 fa41 	bl	8007b16 <USB_ReadPMA>
 8002694:	e020      	b.n	80026d8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	3306      	adds	r3, #6
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	6959      	ldr	r1, [r3, #20]
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	895a      	ldrh	r2, [r3, #10]
 80026d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d4:	f005 fa1f 	bl	8007b16 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026de:	441a      	add	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ea:	441a      	add	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <PCD_EP_ISR_Handler+0x4c2>
 80026f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d206      	bcs.n	8002710 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f006 fdf5 	bl	80092f8 <HAL_PCD_DataOutStageCallback>
 800270e:	e005      	b.n	800271c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fa42 	bl	8005ba0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800271c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07e      	beq.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002726:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	843b      	strh	r3, [r7, #32]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	441a      	add	r2, r3
 8002764:	8c3b      	ldrh	r3, [r7, #32]
 8002766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800276e:	b29b      	uxth	r3, r3
 8002770:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	78db      	ldrb	r3, [r3, #3]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d00c      	beq.n	8002794 <PCD_EP_ISR_Handler+0x554>
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	78db      	ldrb	r3, [r3, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002786:	2b02      	cmp	r3, #2
 8002788:	d146      	bne.n	8002818 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800278a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d141      	bne.n	8002818 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	3302      	adds	r3, #2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027bc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	8bfb      	ldrh	r3, [r7, #30]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d906      	bls.n	80027d6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	8bfb      	ldrh	r3, [r7, #30]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	619a      	str	r2, [r3, #24]
 80027d4:	e002      	b.n	80027dc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f006 fd9f 	bl	800932e <HAL_PCD_DataInStageCallback>
 80027f0:	e018      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	8bfb      	ldrh	r3, [r7, #30]
 80027f8:	441a      	add	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	8bfb      	ldrh	r3, [r7, #30]
 8002804:	441a      	add	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002810:	4618      	mov	r0, r3
 8002812:	f003 f9c5 	bl	8005ba0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002816:	e005      	b.n	8002824 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800281a:	461a      	mov	r2, r3
 800281c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f91b 	bl	8002a5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282c:	b29b      	uxth	r3, r3
 800282e:	b21b      	sxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	f6ff ad0a 	blt.w	800224a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3738      	adds	r7, #56	; 0x38
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d07e      	beq.n	8002956 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	3302      	adds	r3, #2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	8b7b      	ldrh	r3, [r7, #26]
 8002888:	429a      	cmp	r2, r3
 800288a:	d306      	bcc.n	800289a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	8b7b      	ldrh	r3, [r7, #26]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	619a      	str	r2, [r3, #24]
 8002898:	e002      	b.n	80028a0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d123      	bne.n	80028f0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	833b      	strh	r3, [r7, #24]
 80028c4:	8b3b      	ldrh	r3, [r7, #24]
 80028c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ca:	833b      	strh	r3, [r7, #24]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	8b3b      	ldrh	r3, [r7, #24]
 80028dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01f      	beq.n	800293a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	82fb      	strh	r3, [r7, #22]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	441a      	add	r2, r3
 8002924:	8afb      	ldrh	r3, [r7, #22]
 8002926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002932:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002936:	b29b      	uxth	r3, r3
 8002938:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800293a:	8b7b      	ldrh	r3, [r7, #26]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8087 	beq.w	8002a50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6959      	ldr	r1, [r3, #20]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	891a      	ldrh	r2, [r3, #8]
 800294e:	8b7b      	ldrh	r3, [r7, #26]
 8002950:	f005 f8e1 	bl	8007b16 <USB_ReadPMA>
 8002954:	e07c      	b.n	8002a50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	3306      	adds	r3, #6
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	429a      	cmp	r2, r3
 8002988:	d306      	bcc.n	8002998 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	8b7b      	ldrh	r3, [r7, #26]
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e002      	b.n	800299e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d123      	bne.n	80029ee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	83fb      	strh	r3, [r7, #30]
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029c8:	83fb      	strh	r3, [r7, #30]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	8bfb      	ldrh	r3, [r7, #30]
 80029da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11f      	bne.n	8002a38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	83bb      	strh	r3, [r7, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	8bbb      	ldrh	r3, [r7, #28]
 8002a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a38:	8b7b      	ldrh	r3, [r7, #26]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6959      	ldr	r1, [r3, #20]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	895a      	ldrh	r2, [r3, #10]
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
 8002a4c:	f005 f863 	bl	8007b16 <USB_ReadPMA>
    }
  }

  return count;
 8002a50:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b0a2      	sub	sp, #136	; 0x88
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 81c7 	beq.w	8002e02 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d907      	bls.n	8002abc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab4:	1ad2      	subs	r2, r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	e002      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80b9 	bne.w	8002c3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d126      	bne.n	8002b22 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	4413      	add	r3, r2
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	011a      	lsls	r2, r3, #4
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	4413      	add	r3, r2
 8002af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e01a      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d116      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	4413      	add	r3, r2
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	011a      	lsls	r2, r3, #4
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2200      	movs	r2, #0
 8002b56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d126      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	011a      	lsls	r2, r3, #4
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e017      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d113      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	4413      	add	r3, r2
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2200      	movs	r2, #0
 8002be2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f006 fb9f 	bl	800932e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 82d4 	beq.w	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	827b      	strh	r3, [r7, #18]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	441a      	add	r2, r3
 8002c26:	8a7b      	ldrh	r3, [r7, #18]
 8002c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	8013      	strh	r3, [r2, #0]
 8002c3c:	e2b2      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d021      	beq.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 8286 	bne.w	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cae:	441a      	add	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d309      	bcc.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	621a      	str	r2, [r3, #32]
 8002cd2:	e015      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002cdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cea:	e009      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d155      	bne.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	4413      	add	r3, r2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	011a      	lsls	r2, r3, #4
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	4413      	add	r3, r2
 8002d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d112      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x302>
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e047      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x392>
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d60:	d811      	bhi.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	3301      	adds	r3, #1
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	029b      	lsls	r3, r3, #10
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e032      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x392>
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x342>
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e01b      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x392>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d117      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x392>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	4413      	add	r3, r2
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	4413      	add	r3, r2
 8002dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6959      	ldr	r1, [r3, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	891a      	ldrh	r2, [r3, #8]
 8002df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f004 fe46 	bl	8007a8c <USB_WritePMA>
 8002e00:	e1d0      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	3306      	adds	r3, #6
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d307      	bcc.n	8002e4a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e002      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 80c4 	bne.w	8002fe2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d126      	bne.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x456>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	4413      	add	r3, r2
 8002e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	011a      	lsls	r2, r3, #4
 8002e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e82:	4413      	add	r3, r2
 8002e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e01a      	b.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d116      	bne.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ecc:	4413      	add	r3, r2
 8002ece:	677b      	str	r3, [r7, #116]	; 0x74
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	011a      	lsls	r2, r3, #4
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d12f      	bne.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	011a      	lsls	r2, r3, #4
 8002f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f50:	801a      	strh	r2, [r3, #0]
 8002f52:	e017      	b.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	785b      	ldrb	r3, [r3, #1]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d113      	bne.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f6a:	4413      	add	r3, r2
 8002f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f80:	2200      	movs	r2, #0
 8002f82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f006 f9cf 	bl	800932e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 8104 	bne.w	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8013      	strh	r3, [r2, #0]
 8002fe0:	e0e0      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d121      	bne.n	8003030 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800301c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	b29b      	uxth	r3, r3
 800302e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003036:	2b01      	cmp	r3, #1
 8003038:	f040 80b4 	bne.w	80031a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003044:	441a      	add	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003052:	441a      	add	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d309      	bcc.n	8003078 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	e015      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003080:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003084:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800308e:	e009      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	667b      	str	r3, [r7, #100]	; 0x64
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d155      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x704>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c6:	4413      	add	r3, r2
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	011a      	lsls	r2, r3, #4
 80030d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d2:	4413      	add	r3, r2
 80030d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80030e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ee:	801a      	strh	r2, [r3, #0]
 80030f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e044      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x736>
 8003106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003108:	2b3e      	cmp	r3, #62	; 0x3e
 800310a:	d811      	bhi.n	8003130 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800310c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	657b      	str	r3, [r7, #84]	; 0x54
 8003112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800311c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311e:	3301      	adds	r3, #1
 8003120:	657b      	str	r3, [r7, #84]	; 0x54
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	b29b      	uxth	r3, r3
 8003126:	029b      	lsls	r3, r3, #10
 8003128:	b29a      	uxth	r2, r3
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	801a      	strh	r2, [r3, #0]
 800312e:	e02f      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x736>
 8003130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	657b      	str	r3, [r7, #84]	; 0x54
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	3b01      	subs	r3, #1
 8003144:	657b      	str	r3, [r7, #84]	; 0x54
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	b29b      	uxth	r3, r3
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e018      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x736>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d114      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x736>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003174:	4413      	add	r3, r2
 8003176:	667b      	str	r3, [r7, #100]	; 0x64
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	011a      	lsls	r2, r3, #4
 800317e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003180:	4413      	add	r3, r2
 8003182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003186:	663b      	str	r3, [r7, #96]	; 0x60
 8003188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318a:	b29a      	uxth	r2, r3
 800318c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800318e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6959      	ldr	r1, [r3, #20]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	895a      	ldrh	r2, [r3, #10]
 800319c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f004 fc74 	bl	8007a8c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031be:	823b      	strh	r3, [r7, #16]
 80031c0:	8a3b      	ldrh	r3, [r7, #16]
 80031c2:	f083 0310 	eor.w	r3, r3, #16
 80031c6:	823b      	strh	r3, [r7, #16]
 80031c8:	8a3b      	ldrh	r3, [r7, #16]
 80031ca:	f083 0320 	eor.w	r3, r3, #32
 80031ce:	823b      	strh	r3, [r7, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	8a3b      	ldrh	r3, [r7, #16]
 80031e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3788      	adds	r7, #136	; 0x88
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	817b      	strh	r3, [r7, #10]
 800320c:	4613      	mov	r3, r2
 800320e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003210:	897b      	ldrh	r3, [r7, #10]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e009      	b.n	8003248 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003234:	897a      	ldrh	r2, [r7, #10]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	b29a      	uxth	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	80da      	strh	r2, [r3, #6]
 800325c:	e00b      	b.n	8003276 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2201      	movs	r2, #1
 8003262:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	b29a      	uxth	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b29a      	uxth	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e272      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
 80032bc:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d168      	bne.n	80033b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e24c      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x76>
 80032ec:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e02e      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a77      	ldr	r2, [pc, #476]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xbc>
 8003326:	4b72      	ldr	r3, [pc, #456]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a71      	ldr	r2, [pc, #452]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 8003340:	4b6b      	ldr	r3, [pc, #428]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6a      	ldr	r2, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fd fde2 	bl	8000f28 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fdde 	bl	8000f28 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e200      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xe4>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fdce 	bl	8000f28 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fd fdca 	bl	8000f28 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1ec      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x10c>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c0      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4939      	ldr	r1, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd fd83 	bl	8000f28 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fd fd7f 	bl	8000f28 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fd62 	bl	8000f28 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fd fd5e 	bl	8000f28 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e180      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03a      	beq.n	8003508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fd fd42 	bl	8000f28 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fd fd3e 	bl	8000f28 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e160      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 fad8 	bl	8003a7c <RCC_Delay>
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fd28 	bl	8000f28 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fd fd24 	bl	8000f28 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e146      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000
 80034f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e9      	bne.n	80034dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b7f      	ldr	r3, [pc, #508]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fd fce5 	bl	8000f28 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fd fce1 	bl	8000f28 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e103      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b75      	ldr	r3, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x334>
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a69      	ldr	r2, [pc, #420]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a66      	ldr	r2, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x356>
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fd fc95 	bl	8000f28 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fc91 	bl	8000f28 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0b1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x37e>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd fc7f 	bl	8000f28 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fc7b 	bl	8000f28 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e09b      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d061      	beq.n	800373c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d146      	bne.n	800370e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd fc4f 	bl	8000f28 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fd fc4b 	bl	8000f28 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e06d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fc1f 	bl	8000f28 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fc1b 	bl	8000f28 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
 800370c:	e035      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fc08 	bl	8000f28 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fc04 	bl	8000f28 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x498>
 800373a:	e01e      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e019      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x500>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4965      	ldr	r1, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fd fb56 	bl	8000f28 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fb52 	bl	8000f28 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4922      	ldr	r1, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fab4 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	0800a230 	.word	0x0800a230
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b490      	push	{r4, r7}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xac>)
 8003964:	1d3c      	adds	r4, r7, #4
 8003966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800396c:	f240 2301 	movw	r3, #513	; 0x201
 8003970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003996:	2b08      	cmp	r3, #8
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x46>
 800399a:	e02b      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800399e:	623b      	str	r3, [r7, #32]
      break;
 80039a0:	e02b      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	0c9b      	lsrs	r3, r3, #18
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3328      	adds	r3, #40	; 0x28
 80039ac:	443b      	add	r3, r7
 80039ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0c5b      	lsrs	r3, r3, #17
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	3328      	adds	r3, #40	; 0x28
 80039ca:	443b      	add	r3, r7
 80039cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039d6:	fb03 f202 	mul.w	r2, r3, r2
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e004      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	623b      	str	r3, [r7, #32]
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039f6:	623b      	str	r3, [r7, #32]
      break;
 80039f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fa:	6a3b      	ldr	r3, [r7, #32]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	; 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc90      	pop	{r4, r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	0800a158 	.word	0x0800a158
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	007a1200 	.word	0x007a1200
 8003a14:	003d0900 	.word	0x003d0900

08003a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b02      	ldr	r3, [pc, #8]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	20000000 	.word	0x20000000

08003a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a30:	f7ff fff2 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800a240 	.word	0x0800a240

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a58:	f7ff ffde 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	0800a240 	.word	0x0800a240

08003a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <RCC_Delay+0x34>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <RCC_Delay+0x38>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a5b      	lsrs	r3, r3, #9
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a98:	bf00      	nop
  }
  while (Delay --);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e5a      	subs	r2, r3, #1
 8003a9e:	60fa      	str	r2, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f9      	bne.n	8003a98 <RCC_Delay+0x1c>
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	10624dd3 	.word	0x10624dd3

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	61d3      	str	r3, [r2, #28]
 8003af0:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d118      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b18:	f7fd fa06 	bl	8000f28 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	e008      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fd fa02 	bl	8000f28 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e06d      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d027      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d014      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fd f9d1 	bl	8000f28 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd f9cd 	bl	8000f28 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e036      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4917      	ldr	r1, [pc, #92]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	490b      	ldr	r1, [pc, #44]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	4904      	ldr	r1, [pc, #16]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42420440 	.word	0x42420440

08003c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e041      	b.n	8003cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fc ffc4 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fb0c 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e03a      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_TIM_Base_Start_IT+0x98>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x58>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x58>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x58>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d010      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800

08003d68 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e041      	b.n	8003e00 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f839 	bl	8003e08 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f000 fa69 	bl	8004280 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0208 	bic.w	r2, r2, #8
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d122      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d11b      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0202 	mvn.w	r2, #2
 8003e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f9f3 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003e62:	e005      	b.n	8003e70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f9e6 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9f5 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d122      	bne.n	8003eca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d11b      	bne.n	8003eca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0204 	mvn.w	r2, #4
 8003e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9c9 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003eb6:	e005      	b.n	8003ec4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9bc 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9cb 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d122      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11b      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0208 	mvn.w	r2, #8
 8003eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f99f 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003f0a:	e005      	b.n	8003f18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f992 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9a1 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d122      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d11b      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0210 	mvn.w	r2, #16
 8003f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2208      	movs	r2, #8
 8003f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f975 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003f5e:	e005      	b.n	8003f6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f968 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f977 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0201 	mvn.w	r2, #1
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fc faab 	bl	80004f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fb48 	bl	800465a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f93b 	bl	800426c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d10e      	bne.n	8004022 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d107      	bne.n	8004022 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0220 	mvn.w	r2, #32
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb13 	bl	8004648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_TIM_ConfigClockSource+0x18>
 800403e:	2302      	movs	r3, #2
 8004040:	e0b3      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x180>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004060:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004068:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407a:	d03e      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0xd0>
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	f200 8087 	bhi.w	8004192 <HAL_TIM_ConfigClockSource+0x168>
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	f000 8085 	beq.w	8004196 <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d87f      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 8004092:	2b70      	cmp	r3, #112	; 0x70
 8004094:	d01a      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0xa2>
 8004096:	2b70      	cmp	r3, #112	; 0x70
 8004098:	d87b      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 800409a:	2b60      	cmp	r3, #96	; 0x60
 800409c:	d050      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x116>
 800409e:	2b60      	cmp	r3, #96	; 0x60
 80040a0:	d877      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 80040a2:	2b50      	cmp	r3, #80	; 0x50
 80040a4:	d03c      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xf6>
 80040a6:	2b50      	cmp	r3, #80	; 0x50
 80040a8:	d873      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d058      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x136>
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d86f      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d064      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x156>
 80040b6:	2b30      	cmp	r3, #48	; 0x30
 80040b8:	d86b      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d060      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x156>
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d867      	bhi.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d05c      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x156>
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d05a      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040ca:	e062      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f000 fa37 	bl	800454e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	609a      	str	r2, [r3, #8]
      break;
 80040f8:	e04e      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6899      	ldr	r1, [r3, #8]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f000 fa20 	bl	800454e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e03b      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	461a      	mov	r2, r3
 800412e:	f000 f997 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2150      	movs	r1, #80	; 0x50
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f9ee 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 800413e:	e02b      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	461a      	mov	r2, r3
 800414e:	f000 f9b5 	bl	80044bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2160      	movs	r1, #96	; 0x60
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f9de 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 800415e:	e01b      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	461a      	mov	r2, r3
 800416e:	f000 f977 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2140      	movs	r1, #64	; 0x40
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f9ce 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 800417e:	e00b      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 f9c5 	bl	800451a <TIM_ITRx_SetConfig>
        break;
 8004190:	e002      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e031      	b.n	800422e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8b1 	bl	8004344 <TIM_SlaveTimer_SetConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e018      	b.n	800422e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800421a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
	...

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <TIM_Base_SetConfig+0xb8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_Base_SetConfig+0x30>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d007      	beq.n	80042b0 <TIM_Base_SetConfig+0x30>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a26      	ldr	r2, [pc, #152]	; (800433c <TIM_Base_SetConfig+0xbc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0x30>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a25      	ldr	r2, [pc, #148]	; (8004340 <TIM_Base_SetConfig+0xc0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d108      	bne.n	80042c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <TIM_Base_SetConfig+0xb8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0x62>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0x62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <TIM_Base_SetConfig+0xbc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0x62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <TIM_Base_SetConfig+0xc0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <TIM_Base_SetConfig+0xb8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800

08004344 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b70      	cmp	r3, #112	; 0x70
 8004388:	d01a      	beq.n	80043c0 <TIM_SlaveTimer_SetConfig+0x7c>
 800438a:	2b70      	cmp	r3, #112	; 0x70
 800438c:	d860      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 800438e:	2b60      	cmp	r3, #96	; 0x60
 8004390:	d054      	beq.n	800443c <TIM_SlaveTimer_SetConfig+0xf8>
 8004392:	2b60      	cmp	r3, #96	; 0x60
 8004394:	d85c      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 8004396:	2b50      	cmp	r3, #80	; 0x50
 8004398:	d046      	beq.n	8004428 <TIM_SlaveTimer_SetConfig+0xe4>
 800439a:	2b50      	cmp	r3, #80	; 0x50
 800439c:	d858      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d019      	beq.n	80043d6 <TIM_SlaveTimer_SetConfig+0x92>
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d854      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	d054      	beq.n	8004454 <TIM_SlaveTimer_SetConfig+0x110>
 80043aa:	2b30      	cmp	r3, #48	; 0x30
 80043ac:	d850      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d050      	beq.n	8004454 <TIM_SlaveTimer_SetConfig+0x110>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d84c      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04c      	beq.n	8004454 <TIM_SlaveTimer_SetConfig+0x110>
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d04a      	beq.n	8004454 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80043be:	e047      	b.n	8004450 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f000 f8bd 	bl	800454e <TIM_ETR_SetConfig>
      break;
 80043d4:	e03f      	b.n	8004456 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d101      	bne.n	80043e2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03a      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004408:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	621a      	str	r2, [r3, #32]
      break;
 8004426:	e016      	b.n	8004456 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	461a      	mov	r2, r3
 8004436:	f000 f813 	bl	8004460 <TIM_TI1_ConfigInputStage>
      break;
 800443a:	e00c      	b.n	8004456 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	461a      	mov	r2, r3
 800444a:	f000 f837 	bl	80044bc <TIM_TI2_ConfigInputStage>
      break;
 800444e:	e002      	b.n	8004456 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004454:	bf00      	nop
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 0210 	bic.w	r2, r3, #16
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	031b      	lsls	r3, r3, #12
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	021a      	lsls	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	431a      	orrs	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e046      	b.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d009      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800

08004648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e03f      	b.n	80046fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fb12 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fc25 	bl	8004f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d17c      	bne.n	8004820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit+0x2c>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e075      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x3e>
 8004740:	2302      	movs	r3, #2
 8004742:	e06e      	b.n	8004822 <HAL_UART_Transmit+0x11c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475a:	f7fc fbe5 	bl	8000f28 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d108      	bne.n	8004788 <HAL_UART_Transmit+0x82>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e003      	b.n	8004790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004798:	e02a      	b.n	80047f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fa11 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e036      	b.n	8004822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3302      	adds	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e007      	b.n	80047e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1cf      	bne.n	800479a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f9e1 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_UART_IRQHandler+0x52>
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa99 	bl	8004dae <UART_Receive_IT>
      return;
 800487c:	e17b      	b.n	8004b76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80b1 	beq.w	80049e8 <HAL_UART_IRQHandler+0x1bc>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_UART_IRQHandler+0x70>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80a6 	beq.w	80049e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_UART_IRQHandler+0x90>
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_UART_IRQHandler+0xb0>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0202 	orr.w	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_UART_IRQHandler+0xd0>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00f      	beq.n	8004926 <HAL_UART_IRQHandler+0xfa>
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_UART_IRQHandler+0xee>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 811e 	beq.w	8004b6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_UART_IRQHandler+0x11e>
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa32 	bl	8004dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <HAL_UART_IRQHandler+0x146>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d031      	beq.n	80049d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f974 	bl	8004c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d023      	beq.n	80049ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004994:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	4a76      	ldr	r2, [pc, #472]	; (8004b7c <HAL_UART_IRQHandler+0x350>)
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fc8c 	bl	80012c8 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c0:	4610      	mov	r0, r2
 80049c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e00e      	b.n	80049e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8ec 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00a      	b.n	80049e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8e8 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e006      	b.n	80049e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8e4 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049e2:	e0c3      	b.n	8004b6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	bf00      	nop
    return;
 80049e6:	e0c1      	b.n	8004b6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	f040 80a1 	bne.w	8004b34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 809b 	beq.w	8004b34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8095 	beq.w	8004b34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04e      	beq.n	8004acc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a38:	8a3b      	ldrh	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8098 	beq.w	8004b70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a44:	8a3a      	ldrh	r2, [r7, #16]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	f080 8092 	bcs.w	8004b70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8a3a      	ldrh	r2, [r7, #16]
 8004a50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d02b      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a6a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0210 	bic.w	r2, r2, #16
 8004aa8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fbd0 	bl	8001254 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f876 	bl	8004bb6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004aca:	e051      	b.n	8004b70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d047      	beq.n	8004b74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ae4:	8a7b      	ldrh	r3, [r7, #18]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004af8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0210 	bic.w	r2, r2, #16
 8004b26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b28:	8a7b      	ldrh	r3, [r7, #18]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f842 	bl	8004bb6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b32:	e01f      	b.n	8004b74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_UART_IRQHandler+0x324>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f8c9 	bl	8004ce0 <UART_Transmit_IT>
    return;
 8004b4e:	e012      	b.n	8004b76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <HAL_UART_IRQHandler+0x34a>
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f90a 	bl	8004d7e <UART_EndTransmit_IT>
    return;
 8004b6a:	e004      	b.n	8004b76 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b6c:	bf00      	nop
 8004b6e:	e002      	b.n	8004b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b74:	bf00      	nop
  }
}
 8004b76:	3728      	adds	r7, #40	; 0x28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004cb9 	.word	0x08004cb9

08004b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	e02c      	b.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d028      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bec:	f7fc f99c 	bl	8000f28 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d21d      	bcs.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e00f      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d0c3      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0210 	bic.w	r2, r2, #16
 8004c9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff ff66 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b21      	cmp	r3, #33	; 0x21
 8004cf2:	d13e      	bne.n	8004d72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d114      	bne.n	8004d28 <UART_Transmit_IT+0x48>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d110      	bne.n	8004d28 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]
 8004d26:	e008      	b.n	8004d3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6211      	str	r1, [r2, #32]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4619      	mov	r1, r3
 8004d48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e000      	b.n	8004d74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff feee 	bl	8004b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	f040 8099 	bne.w	8004ef6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d117      	bne.n	8004dfe <UART_Receive_IT+0x50>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d113      	bne.n	8004dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004dfc:	e026      	b.n	8004e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d007      	beq.n	8004e22 <UART_Receive_IT+0x74>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <UART_Receive_IT+0x82>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e008      	b.n	8004e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d148      	bne.n	8004ef2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0220 	bic.w	r2, r2, #32
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d123      	bne.n	8004ee8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0210 	bic.w	r2, r2, #16
 8004eb4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d10a      	bne.n	8004eda <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fe68 	bl	8004bb6 <HAL_UARTEx_RxEventCallback>
 8004ee6:	e002      	b.n	8004eee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fe52 	bl	8004b92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e002      	b.n	8004ef8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f3a:	f023 030c 	bic.w	r3, r3, #12
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <UART_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe fd74 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	e002      	b.n	8004f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7fe fd5c 	bl	8003a2c <HAL_RCC_GetPCLK1Freq>
 8004f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <UART_SetConfig+0x118>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	0119      	lsls	r1, r3, #4
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <UART_SetConfig+0x118>)
 8004fae:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2064      	movs	r0, #100	; 0x64
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <UART_SetConfig+0x118>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	4419      	add	r1, r3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <UART_SetConfig+0x118>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a07      	ldr	r2, [pc, #28]	; (8005018 <UART_SetConfig+0x118>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	440a      	add	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40013800 	.word	0x40013800
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800501c:	b084      	sub	sp, #16
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	f107 0014 	add.w	r0, r7, #20
 800502a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	b004      	add	sp, #16
 800503a:	4770      	bx	lr

0800503c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800504c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005050:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005070:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005074:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	b29b      	uxth	r3, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	b29b      	uxth	r3, r3
 8005086:	4013      	ands	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050b4:	b084      	sub	sp, #16
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	f107 0014 	add.w	r0, r7, #20
 80050c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	b004      	add	sp, #16
 80050f2:	4770      	bx	lr

080050f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b09b      	sub	sp, #108	; 0x6c
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d81f      	bhi.n	8005166 <USB_ActivateEndpoint+0x72>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <USB_ActivateEndpoint+0x38>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800513d 	.word	0x0800513d
 8005130:	08005159 	.word	0x08005159
 8005134:	0800516f 	.word	0x0800516f
 8005138:	0800514b 	.word	0x0800514b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800513c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005144:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005148:	e012      	b.n	8005170 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800514a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800514e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005152:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005156:	e00b      	b.n	8005170 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005158:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800515c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005160:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005164:	e004      	b.n	8005170 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800516c:	e000      	b.n	8005170 <USB_ActivateEndpoint+0x7c>
      break;
 800516e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800517e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518e:	b29b      	uxth	r3, r3
 8005190:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80051c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	7b1b      	ldrb	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 8149 	bne.w	8005474 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8084 	beq.w	80052f4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	88db      	ldrh	r3, [r3, #6]
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	81fb      	strh	r3, [r7, #14]
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <USB_ActivateEndpoint+0x17c>
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	81bb      	strh	r3, [r7, #12]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	89bb      	ldrh	r3, [r7, #12]
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005268:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	78db      	ldrb	r3, [r3, #3]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d020      	beq.n	80052ba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	813b      	strh	r3, [r7, #8]
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	f083 0320 	eor.w	r3, r3, #32
 8005296:	813b      	strh	r3, [r7, #8]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
 80052b8:	e27f      	b.n	80057ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	897b      	ldrh	r3, [r7, #10]
 80052de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	8013      	strh	r3, [r2, #0]
 80052f2:	e262      	b.n	80057ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	4413      	add	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	4413      	add	r3, r2
 8005312:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	88db      	ldrh	r3, [r3, #6]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	4413      	add	r3, r2
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	011a      	lsls	r2, r3, #4
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	4413      	add	r3, r2
 8005346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d112      	bne.n	800537a <USB_ActivateEndpoint+0x286>
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800535e:	b29a      	uxth	r2, r3
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005372:	b29a      	uxth	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e02f      	b.n	80053da <USB_ActivateEndpoint+0x2e6>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b3e      	cmp	r3, #62	; 0x3e
 8005380:	d813      	bhi.n	80053aa <USB_ActivateEndpoint+0x2b6>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	663b      	str	r3, [r7, #96]	; 0x60
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <USB_ActivateEndpoint+0x2a8>
 8005396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005398:	3301      	adds	r3, #1
 800539a:	663b      	str	r3, [r7, #96]	; 0x60
 800539c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e017      	b.n	80053da <USB_ActivateEndpoint+0x2e6>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <USB_ActivateEndpoint+0x2d0>
 80053be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c0:	3b01      	subs	r3, #1
 80053c2:	663b      	str	r3, [r7, #96]	; 0x60
 80053c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	83fb      	strh	r3, [r7, #30]
 80053e8:	8bfb      	ldrh	r3, [r7, #30]
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <USB_ActivateEndpoint+0x336>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	83bb      	strh	r3, [r7, #28]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8bbb      	ldrh	r3, [r7, #28]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	837b      	strh	r3, [r7, #26]
 8005442:	8b7b      	ldrh	r3, [r7, #26]
 8005444:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005448:	837b      	strh	r3, [r7, #26]
 800544a:	8b7b      	ldrh	r3, [r7, #26]
 800544c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005450:	837b      	strh	r3, [r7, #26]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8b7b      	ldrh	r3, [r7, #26]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
 8005472:	e1a2      	b.n	80057ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c0:	4413      	add	r3, r2
 80054c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d2:	657b      	str	r3, [r7, #84]	; 0x54
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	891b      	ldrh	r3, [r3, #8]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	4413      	add	r3, r2
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	011a      	lsls	r2, r3, #4
 80054fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005500:	4413      	add	r3, r2
 8005502:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	895b      	ldrh	r3, [r3, #10]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	b29b      	uxth	r3, r3
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005516:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 8091 	bne.w	8005644 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005530:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01b      	beq.n	8005572 <USB_ActivateEndpoint+0x47e>
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01b      	beq.n	80055c2 <USB_ActivateEndpoint+0x4ce>
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005620:	867b      	strh	r3, [r7, #50]	; 0x32
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
 8005642:	e0ba      	b.n	80057ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005654:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01d      	beq.n	800569c <USB_ActivateEndpoint+0x5a8>
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01d      	beq.n	80056f4 <USB_ActivateEndpoint+0x600>
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d024      	beq.n	8005746 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800571a:	f083 0320 	eor.w	r3, r3, #32
 800571e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
 8005744:	e01d      	b.n	8005782 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80057ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80057be:	4618      	mov	r0, r3
 80057c0:	376c      	adds	r7, #108	; 0x6c
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b08d      	sub	sp, #52	; 0x34
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	7b1b      	ldrb	r3, [r3, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 808e 	bne.w	80058f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d044      	beq.n	800586e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	81bb      	strh	r3, [r7, #12]
 80057f2:	89bb      	ldrh	r3, [r7, #12]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <USB_DeactivateEndpoint+0x6c>
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	817b      	strh	r3, [r7, #10]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584a:	813b      	strh	r3, [r7, #8]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	893b      	ldrh	r3, [r7, #8]
 8005858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	b29b      	uxth	r3, r3
 800586a:	8013      	strh	r3, [r2, #0]
 800586c:	e192      	b.n	8005b94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	827b      	strh	r3, [r7, #18]
 800587c:	8a7b      	ldrh	r3, [r7, #18]
 800587e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01b      	beq.n	80058be <USB_DeactivateEndpoint+0xf6>
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	823b      	strh	r3, [r7, #16]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	441a      	add	r2, r3
 80058a8:	8a3b      	ldrh	r3, [r7, #16]
 80058aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	81fb      	strh	r3, [r7, #14]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8013      	strh	r3, [r2, #0]
 80058f6:	e14d      	b.n	8005b94 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f040 80a5 	bne.w	8005a4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	843b      	strh	r3, [r7, #32]
 8005910:	8c3b      	ldrh	r3, [r7, #32]
 8005912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <USB_DeactivateEndpoint+0x18a>
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	83fb      	strh	r3, [r7, #30]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	441a      	add	r2, r3
 800593c:	8bfb      	ldrh	r3, [r7, #30]
 800593e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	b29b      	uxth	r3, r3
 8005950:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	83bb      	strh	r3, [r7, #28]
 8005960:	8bbb      	ldrh	r3, [r7, #28]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <USB_DeactivateEndpoint+0x1da>
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	837b      	strh	r3, [r7, #26]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8b7b      	ldrh	r3, [r7, #26]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	833b      	strh	r3, [r7, #24]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8b3b      	ldrh	r3, [r7, #24]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	82fb      	strh	r3, [r7, #22]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	441a      	add	r2, r3
 80059fc:	8afb      	ldrh	r3, [r7, #22]
 80059fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	82bb      	strh	r3, [r7, #20]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	8abb      	ldrh	r3, [r7, #20]
 8005a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	8013      	strh	r3, [r2, #0]
 8005a4a:	e0a3      	b.n	8005b94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <USB_DeactivateEndpoint+0x2d4>
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01b      	beq.n	8005aec <USB_DeactivateEndpoint+0x324>
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	853b      	strh	r3, [r7, #40]	; 0x28
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3734      	adds	r7, #52	; 0x34
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b0cc      	sub	sp, #304	; 0x130
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bae:	6018      	str	r0, [r3, #0]
 8005bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	f041 817d 	bne.w	8006ec6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d908      	bls.n	8005bfa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005bf8:	e007      	b.n	8005c0a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	7b1b      	ldrb	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d152      	bne.n	8005cc0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	88da      	ldrh	r2, [r3, #6]
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c40:	6800      	ldr	r0, [r0, #0]
 8005c42:	f001 ff23 	bl	8007a8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c52:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c78:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	440a      	add	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	011a      	lsls	r2, r3, #4
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	f001 b8b5 	b.w	8006e2a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	78db      	ldrb	r3, [r3, #3]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	f040 84c6 	bne.w	800665e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a1a      	ldr	r2, [r3, #32]
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f240 8443 	bls.w	8006576 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 823e 	beq.w	800620e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d9e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 809a 	bne.w	8005eec <USB_EPStartXfer+0x34c>
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dc4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	440a      	add	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	011a      	lsls	r2, r3, #4
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d122      	bne.n	8005e6a <USB_EPStartXfer+0x2ca>
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	e079      	b.n	8005f5e <USB_EPStartXfer+0x3be>
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e70:	d81b      	bhi.n	8005eaa <USB_EPStartXfer+0x30a>
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <USB_EPStartXfer+0x2f2>
 8005e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e059      	b.n	8005f5e <USB_EPStartXfer+0x3be>
 8005eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <USB_EPStartXfer+0x32a>
 8005ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e038      	b.n	8005f5e <USB_EPStartXfer+0x3be>
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d130      	bne.n	8005f5e <USB_EPStartXfer+0x3be>
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f1a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	440a      	add	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	895b      	ldrh	r3, [r3, #10]
 8005f6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6959      	ldr	r1, [r3, #20]
 8005f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f001 fd7d 	bl	8007a8c <USB_WritePMA>
            ep->xfer_buff += len;
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa2:	441a      	add	r2, r3
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d90f      	bls.n	8005fec <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	1ad2      	subs	r2, r2, r3
 8005fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	621a      	str	r2, [r3, #32]
 8005fea:	e00e      	b.n	800600a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2200      	movs	r2, #0
 8006008:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 809a 	bne.w	8006150 <USB_EPStartXfer+0x5b0>
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006024:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006028:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603e:	b29b      	uxth	r3, r3
 8006040:	4619      	mov	r1, r3
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800604a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800604e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	440a      	add	r2, r1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4413      	add	r3, r2
 8006072:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d122      	bne.n	80060ce <USB_EPStartXfer+0x52e>
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800609a:	b29a      	uxth	r2, r3
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060be:	b29a      	uxth	r2, r3
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e083      	b.n	80061d6 <USB_EPStartXfer+0x636>
 80060ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d2:	2b3e      	cmp	r3, #62	; 0x3e
 80060d4:	d81b      	bhi.n	800610e <USB_EPStartXfer+0x56e>
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <USB_EPStartXfer+0x556>
 80060ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060f0:	3301      	adds	r3, #1
 80060f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e063      	b.n	80061d6 <USB_EPStartXfer+0x636>
 800610e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USB_EPStartXfer+0x58e>
 8006124:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006128:	3b01      	subs	r3, #1
 800612a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800612e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006140:	b29a      	uxth	r2, r3
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e042      	b.n	80061d6 <USB_EPStartXfer+0x636>
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d13a      	bne.n	80061d6 <USB_EPStartXfer+0x636>
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006168:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800616c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	4619      	mov	r1, r3
 8006186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800618e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006192:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	440a      	add	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	011a      	lsls	r2, r3, #4
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006200:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006204:	6800      	ldr	r0, [r0, #0]
 8006206:	f001 fc41 	bl	8007a8c <USB_WritePMA>
 800620a:	f000 be0e 	b.w	8006e2a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d16d      	bne.n	80062fa <USB_EPStartXfer+0x75a>
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	64bb      	str	r3, [r7, #72]	; 0x48
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623e:	4413      	add	r3, r2
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	011a      	lsls	r2, r3, #4
 8006250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
 800625a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d112      	bne.n	8006288 <USB_EPStartXfer+0x6e8>
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800626c:	b29a      	uxth	r2, r3
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e063      	b.n	8006350 <USB_EPStartXfer+0x7b0>
 8006288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628c:	2b3e      	cmp	r3, #62	; 0x3e
 800628e:	d817      	bhi.n	80062c0 <USB_EPStartXfer+0x720>
 8006290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800629a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <USB_EPStartXfer+0x710>
 80062a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062aa:	3301      	adds	r3, #1
 80062ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	029b      	lsls	r3, r3, #10
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e047      	b.n	8006350 <USB_EPStartXfer+0x7b0>
 80062c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <USB_EPStartXfer+0x740>
 80062d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062da:	3b01      	subs	r3, #1
 80062dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80062e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	029b      	lsls	r3, r3, #10
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	e02a      	b.n	8006350 <USB_EPStartXfer+0x7b0>
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d122      	bne.n	8006350 <USB_EPStartXfer+0x7b0>
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
 8006316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632a:	4413      	add	r3, r2
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
 800632e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	011a      	lsls	r2, r3, #4
 800633c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633e:	4413      	add	r3, r2
 8006340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	b29a      	uxth	r2, r3
 800634c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	891b      	ldrh	r3, [r3, #8]
 800635c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6959      	ldr	r1, [r3, #20]
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	b29b      	uxth	r3, r3
 8006372:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006376:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800637a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	f001 fb84 	bl	8007a8c <USB_WritePMA>
            ep->xfer_buff += len;
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006394:	441a      	add	r2, r3
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d90f      	bls.n	80063de <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	621a      	str	r2, [r3, #32]
 80063dc:	e00e      	b.n	80063fc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80063ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2200      	movs	r2, #0
 80063fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	643b      	str	r3, [r7, #64]	; 0x40
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d16d      	bne.n	80064f4 <USB_EPStartXfer+0x954>
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	63bb      	str	r3, [r7, #56]	; 0x38
 8006424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	4413      	add	r3, r2
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	4413      	add	r3, r2
 800644e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
 8006454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d112      	bne.n	8006482 <USB_EPStartXfer+0x8e2>
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006466:	b29a      	uxth	r2, r3
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29a      	uxth	r2, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e05d      	b.n	800653e <USB_EPStartXfer+0x99e>
 8006482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006486:	2b3e      	cmp	r3, #62	; 0x3e
 8006488:	d817      	bhi.n	80064ba <USB_EPStartXfer+0x91a>
 800648a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <USB_EPStartXfer+0x90a>
 80064a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e041      	b.n	800653e <USB_EPStartXfer+0x99e>
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USB_EPStartXfer+0x93a>
 80064d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064de:	b29b      	uxth	r3, r3
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	e024      	b.n	800653e <USB_EPStartXfer+0x99e>
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d11c      	bne.n	800653e <USB_EPStartXfer+0x99e>
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006518:	4413      	add	r3, r2
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
 800651c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	011a      	lsls	r2, r3, #4
 800652a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652c:	4413      	add	r3, r2
 800652e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	b29a      	uxth	r2, r3
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	895b      	ldrh	r3, [r3, #10]
 800654a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6959      	ldr	r1, [r3, #20]
 800655a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655e:	b29b      	uxth	r3, r3
 8006560:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006564:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006568:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f001 fa8d 	bl	8007a8c <USB_WritePMA>
 8006572:	f000 bc5a 	b.w	8006e2a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006602:	4413      	add	r3, r2
 8006604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	011a      	lsls	r2, r3, #4
 8006614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006616:	4413      	add	r3, r2
 8006618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800661c:	65bb      	str	r3, [r7, #88]	; 0x58
 800661e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006622:	b29a      	uxth	r2, r3
 8006624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006626:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	891b      	ldrh	r3, [r3, #8]
 8006634:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6959      	ldr	r1, [r3, #20]
 8006644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006648:	b29b      	uxth	r3, r3
 800664a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800664e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006652:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006656:	6800      	ldr	r0, [r0, #0]
 8006658:	f001 fa18 	bl	8007a8c <USB_WritePMA>
 800665c:	e3e5      	b.n	8006e2a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ca:	1ad2      	subs	r2, r2, r3
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81bc 	beq.w	8006a78 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d16d      	bne.n	80067fa <USB_EPStartXfer+0xc5a>
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	67bb      	str	r3, [r7, #120]	; 0x78
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673e:	4413      	add	r3, r2
 8006740:	67bb      	str	r3, [r7, #120]	; 0x78
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	011a      	lsls	r2, r3, #4
 8006750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006752:	4413      	add	r3, r2
 8006754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006758:	677b      	str	r3, [r7, #116]	; 0x74
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d112      	bne.n	8006788 <USB_EPStartXfer+0xbe8>
 8006762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676c:	b29a      	uxth	r2, r3
 800676e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e060      	b.n	800684a <USB_EPStartXfer+0xcaa>
 8006788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d817      	bhi.n	80067c0 <USB_EPStartXfer+0xc20>
 8006790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <USB_EPStartXfer+0xc10>
 80067a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067aa:	3301      	adds	r3, #1
 80067ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e044      	b.n	800684a <USB_EPStartXfer+0xcaa>
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0xc40>
 80067d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e027      	b.n	800684a <USB_EPStartXfer+0xcaa>
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d11f      	bne.n	800684a <USB_EPStartXfer+0xcaa>
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006820:	4413      	add	r3, r2
 8006822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	011a      	lsls	r2, r3, #4
 8006834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006838:	4413      	add	r3, r2
 800683a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800683e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	b29a      	uxth	r2, r3
 8006846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006848:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	895b      	ldrh	r3, [r3, #10]
 8006856:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6959      	ldr	r1, [r3, #20]
 8006866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686a:	b29b      	uxth	r3, r3
 800686c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006870:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006874:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006878:	6800      	ldr	r0, [r0, #0]
 800687a:	f001 f907 	bl	8007a8c <USB_WritePMA>
          ep->xfer_buff += len;
 800687e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695a      	ldr	r2, [r3, #20]
 800688a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688e:	441a      	add	r2, r3
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800689c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d90f      	bls.n	80068d8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	621a      	str	r2, [r3, #32]
 80068d6:	e00e      	b.n	80068f6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8295 	beq.w	8006e2a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d16d      	bne.n	80069ec <USB_EPStartXfer+0xe4c>
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	66bb      	str	r3, [r7, #104]	; 0x68
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692a:	b29b      	uxth	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006930:	4413      	add	r3, r2
 8006932:	66bb      	str	r3, [r7, #104]	; 0x68
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	011a      	lsls	r2, r3, #4
 8006942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006944:	4413      	add	r3, r2
 8006946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800694a:	667b      	str	r3, [r7, #100]	; 0x64
 800694c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d112      	bne.n	800697a <USB_EPStartXfer+0xdda>
 8006954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800695e:	b29a      	uxth	r2, r3
 8006960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e063      	b.n	8006a42 <USB_EPStartXfer+0xea2>
 800697a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697e:	2b3e      	cmp	r3, #62	; 0x3e
 8006980:	d817      	bhi.n	80069b2 <USB_EPStartXfer+0xe12>
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800698c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <USB_EPStartXfer+0xe02>
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699c:	3301      	adds	r3, #1
 800699e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e047      	b.n	8006a42 <USB_EPStartXfer+0xea2>
 80069b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80069bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USB_EPStartXfer+0xe32>
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e02a      	b.n	8006a42 <USB_EPStartXfer+0xea2>
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d122      	bne.n	8006a42 <USB_EPStartXfer+0xea2>
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	673b      	str	r3, [r7, #112]	; 0x70
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1c:	4413      	add	r3, r2
 8006a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	011a      	lsls	r2, r3, #4
 8006a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	891b      	ldrh	r3, [r3, #8]
 8006a4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6959      	ldr	r1, [r3, #20]
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f001 f80b 	bl	8007a8c <USB_WritePMA>
 8006a76:	e1d8      	b.n	8006e2a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d178      	bne.n	8006b7a <USB_EPStartXfer+0xfda>
 8006a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aac:	4413      	add	r3, r2
 8006aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d116      	bne.n	8006b04 <USB_EPStartXfer+0xf64>
 8006ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e06b      	b.n	8006bdc <USB_EPStartXfer+0x103c>
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d818      	bhi.n	8006b3e <USB_EPStartXfer+0xf9e>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <USB_EPStartXfer+0xf8c>
 8006b22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b26:	3301      	adds	r3, #1
 8006b28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e04e      	b.n	8006bdc <USB_EPStartXfer+0x103c>
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USB_EPStartXfer+0xfbe>
 8006b54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e030      	b.n	8006bdc <USB_EPStartXfer+0x103c>
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d128      	bne.n	8006bdc <USB_EPStartXfer+0x103c>
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bae:	4413      	add	r3, r2
 8006bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	891b      	ldrh	r3, [r3, #8]
 8006be8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6959      	ldr	r1, [r3, #20]
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	f000 ff3e 	bl	8007a8c <USB_WritePMA>
          ep->xfer_buff += len;
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695a      	ldr	r2, [r3, #20]
 8006c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c20:	441a      	add	r2, r3
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a1a      	ldr	r2, [r3, #32]
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d90f      	bls.n	8006c6a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	621a      	str	r2, [r3, #32]
 8006c68:	e00e      	b.n	8006c88 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80cc 	beq.w	8006e2a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d178      	bne.n	8006da2 <USB_EPStartXfer+0x1202>
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	011a      	lsls	r2, r3, #4
 8006ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cec:	4413      	add	r3, r2
 8006cee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d116      	bne.n	8006d2c <USB_EPStartXfer+0x118c>
 8006cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e064      	b.n	8006df6 <USB_EPStartXfer+0x1256>
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	2b3e      	cmp	r3, #62	; 0x3e
 8006d32:	d818      	bhi.n	8006d66 <USB_EPStartXfer+0x11c6>
 8006d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <USB_EPStartXfer+0x11b4>
 8006d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	029b      	lsls	r3, r3, #10
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e047      	b.n	8006df6 <USB_EPStartXfer+0x1256>
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <USB_EPStartXfer+0x11e6>
 8006d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e029      	b.n	8006df6 <USB_EPStartXfer+0x1256>
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d121      	bne.n	8006df6 <USB_EPStartXfer+0x1256>
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dc8:	4413      	add	r3, r2
 8006dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	011a      	lsls	r2, r3, #4
 8006ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	f000 fe31 	bl	8007a8c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e4c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e66:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	f082 0210 	eor.w	r2, r2, #16
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006e7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e7e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	f082 0220 	eor.w	r2, r2, #32
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]
 8006ec2:	f000 bc9f 	b.w	8007804 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80ae 	bne.w	8007034 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d917      	bls.n	8006f24 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f14:	1ad2      	subs	r2, r2, r3
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	619a      	str	r2, [r3, #24]
 8006f22:	e00e      	b.n	8006f42 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f66:	4413      	add	r3, r2
 8006f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	011a      	lsls	r2, r3, #4
 8006f7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f7e:	4413      	add	r3, r2
 8006f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d116      	bne.n	8006fbe <USB_EPStartXfer+0x141e>
 8006f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e3e8      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc4:	d818      	bhi.n	8006ff8 <USB_EPStartXfer+0x1458>
 8006fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <USB_EPStartXfer+0x1446>
 8006fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006fe6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e3cb      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <USB_EPStartXfer+0x1478>
 800700e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007012:	3b01      	subs	r3, #1
 8007014:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007018:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800701c:	b29b      	uxth	r3, r3
 800701e:	029b      	lsls	r3, r3, #10
 8007020:	b29b      	uxth	r3, r3
 8007022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e3ad      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	78db      	ldrb	r3, [r3, #3]
 8007040:	2b02      	cmp	r3, #2
 8007042:	f040 8200 	bne.w	8007446 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 8091 	bne.w	800717a <USB_EPStartXfer+0x15da>
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007074:	b29b      	uxth	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800707c:	4413      	add	r3, r2
 800707e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	011a      	lsls	r2, r3, #4
 8007090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007094:	4413      	add	r3, r2
 8007096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800709a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d116      	bne.n	80070dc <USB_EPStartXfer+0x153c>
 80070ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e083      	b.n	80071e4 <USB_EPStartXfer+0x1644>
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ea:	d820      	bhi.n	800712e <USB_EPStartXfer+0x158e>
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <USB_EPStartXfer+0x157c>
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	3301      	adds	r3, #1
 8007118:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e05a      	b.n	80071e4 <USB_EPStartXfer+0x1644>
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <USB_EPStartXfer+0x15be>
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	3b01      	subs	r3, #1
 800715a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	b29b      	uxth	r3, r3
 8007164:	029b      	lsls	r3, r3, #10
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e034      	b.n	80071e4 <USB_EPStartXfer+0x1644>
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d12c      	bne.n	80071e4 <USB_EPStartXfer+0x1644>
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ae:	4413      	add	r3, r2
 80071b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	011a      	lsls	r2, r3, #4
 80071c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f040 8091 	bne.w	8007326 <USB_EPStartXfer+0x1786>
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007228:	4413      	add	r3, r2
 800722a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	011a      	lsls	r2, r3, #4
 800723c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007240:	4413      	add	r3, r2
 8007242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <USB_EPStartXfer+0x16e8>
 800725a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e07c      	b.n	8007382 <USB_EPStartXfer+0x17e2>
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b3e      	cmp	r3, #62	; 0x3e
 8007296:	d820      	bhi.n	80072da <USB_EPStartXfer+0x173a>
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <USB_EPStartXfer+0x1728>
 80072be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072c2:	3301      	adds	r3, #1
 80072c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	029b      	lsls	r3, r3, #10
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e053      	b.n	8007382 <USB_EPStartXfer+0x17e2>
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <USB_EPStartXfer+0x176a>
 8007300:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007304:	3b01      	subs	r3, #1
 8007306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800730a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800730e:	b29b      	uxth	r3, r3
 8007310:	029b      	lsls	r3, r3, #10
 8007312:	b29b      	uxth	r3, r3
 8007314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e02d      	b.n	8007382 <USB_EPStartXfer+0x17e2>
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d125      	bne.n	8007382 <USB_EPStartXfer+0x17e2>
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007344:	b29b      	uxth	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800734c:	4413      	add	r3, r2
 800734e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	011a      	lsls	r2, r3, #4
 8007360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007364:	4413      	add	r3, r2
 8007366:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800736a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007380:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 81fe 	beq.w	8007790 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <USB_EPStartXfer+0x182c>
 80073c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 81db 	bne.w	8007790 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f040 81d4 	bne.w	8007790 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]
 8007444:	e1a4      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	2b01      	cmp	r3, #1
 8007454:	f040 819a 	bne.w	800778c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	429a      	cmp	r2, r3
 8007472:	d917      	bls.n	80074a4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699a      	ldr	r2, [r3, #24]
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	619a      	str	r2, [r3, #24]
 80074a2:	e00e      	b.n	80074c2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d178      	bne.n	80075c4 <USB_EPStartXfer+0x1a24>
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074f6:	4413      	add	r3, r2
 80074f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	011a      	lsls	r2, r3, #4
 800750a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800750e:	4413      	add	r3, r2
 8007510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d116      	bne.n	800754e <USB_EPStartXfer+0x19ae>
 8007520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	e06b      	b.n	8007626 <USB_EPStartXfer+0x1a86>
 800754e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007552:	2b3e      	cmp	r3, #62	; 0x3e
 8007554:	d818      	bhi.n	8007588 <USB_EPStartXfer+0x19e8>
 8007556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <USB_EPStartXfer+0x19d6>
 800756c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29a      	uxth	r2, r3
 8007580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e04e      	b.n	8007626 <USB_EPStartXfer+0x1a86>
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <USB_EPStartXfer+0x1a08>
 800759e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a2:	3b01      	subs	r3, #1
 80075a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	029b      	lsls	r3, r3, #10
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	e030      	b.n	8007626 <USB_EPStartXfer+0x1a86>
 80075c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d128      	bne.n	8007626 <USB_EPStartXfer+0x1a86>
 80075d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	4413      	add	r3, r2
 80075fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	011a      	lsls	r2, r3, #4
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	4413      	add	r3, r2
 8007612:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007616:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	b29a      	uxth	r2, r3
 8007620:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d178      	bne.n	8007736 <USB_EPStartXfer+0x1b96>
 8007644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	011a      	lsls	r2, r3, #4
 800767c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007680:	4413      	add	r3, r2
 8007682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d116      	bne.n	80076c0 <USB_EPStartXfer+0x1b20>
 8007692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e067      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
 80076c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c4:	2b3e      	cmp	r3, #62	; 0x3e
 80076c6:	d818      	bhi.n	80076fa <USB_EPStartXfer+0x1b5a>
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <USB_EPStartXfer+0x1b48>
 80076de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076e2:	3301      	adds	r3, #1
 80076e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	029b      	lsls	r3, r3, #10
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	e04a      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
 80076fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <USB_EPStartXfer+0x1b7a>
 8007710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007714:	3b01      	subs	r3, #1
 8007716:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800771a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800771e:	b29b      	uxth	r3, r3
 8007720:	029b      	lsls	r3, r3, #10
 8007722:	b29b      	uxth	r3, r3
 8007724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772c:	b29a      	uxth	r2, r3
 800772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e02c      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d124      	bne.n	8007790 <USB_EPStartXfer+0x1bf0>
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007754:	b29b      	uxth	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	4413      	add	r3, r2
 800775e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	011a      	lsls	r2, r3, #4
 8007770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007774:	4413      	add	r3, r2
 8007776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800777a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	b29a      	uxth	r2, r3
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	e001      	b.n	8007790 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e03a      	b.n	8007806 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d020      	beq.n	8007864 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007838:	81bb      	strh	r3, [r7, #12]
 800783a:	89bb      	ldrh	r3, [r7, #12]
 800783c:	f083 0310 	eor.w	r3, r3, #16
 8007840:	81bb      	strh	r3, [r7, #12]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	441a      	add	r2, r3
 800784c:	89bb      	ldrh	r3, [r7, #12]
 800784e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785e:	b29b      	uxth	r3, r3
 8007860:	8013      	strh	r3, [r2, #0]
 8007862:	e01f      	b.n	80078a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787a:	81fb      	strh	r3, [r7, #14]
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007882:	81fb      	strh	r3, [r7, #14]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	89fb      	ldrh	r3, [r7, #14]
 8007890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bc80      	pop	{r7}
 80078ae:	4770      	bx	lr

080078b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	7b1b      	ldrb	r3, [r3, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 809d 	bne.w	80079fe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d04c      	beq.n	8007966 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	823b      	strh	r3, [r7, #16]
 80078da:	8a3b      	ldrh	r3, [r7, #16]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01b      	beq.n	800791c <USB_EPClearStall+0x6c>
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	81fb      	strh	r3, [r7, #14]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	89fb      	ldrh	r3, [r7, #14]
 8007908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007918:	b29b      	uxth	r3, r3
 800791a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	78db      	ldrb	r3, [r3, #3]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d06c      	beq.n	80079fe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	81bb      	strh	r3, [r7, #12]
 800793c:	89bb      	ldrh	r3, [r7, #12]
 800793e:	f083 0320 	eor.w	r3, r3, #32
 8007942:	81bb      	strh	r3, [r7, #12]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	89bb      	ldrh	r3, [r7, #12]
 8007950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007960:	b29b      	uxth	r3, r3
 8007962:	8013      	strh	r3, [r2, #0]
 8007964:	e04b      	b.n	80079fe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	82fb      	strh	r3, [r7, #22]
 8007974:	8afb      	ldrh	r3, [r7, #22]
 8007976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01b      	beq.n	80079b6 <USB_EPClearStall+0x106>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007994:	82bb      	strh	r3, [r7, #20]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	441a      	add	r2, r3
 80079a0:	8abb      	ldrh	r3, [r7, #20]
 80079a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079cc:	827b      	strh	r3, [r7, #18]
 80079ce:	8a7b      	ldrh	r3, [r7, #18]
 80079d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079d4:	827b      	strh	r3, [r7, #18]
 80079d6:	8a7b      	ldrh	r3, [r7, #18]
 80079d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079dc:	827b      	strh	r3, [r7, #18]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8a7b      	ldrh	r3, [r7, #18]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2280      	movs	r2, #128	; 0x80
 8007a20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b08d      	sub	sp, #52	; 0x34
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	80fb      	strh	r3, [r7, #6]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007aa2:	88bb      	ldrh	r3, [r7, #4]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	085b      	lsrs	r3, r3, #1
 8007aa8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	005a      	lsls	r2, r3, #1
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac4:	e01e      	b.n	8007b04 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	3302      	adds	r3, #2
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	3302      	adds	r3, #2
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	3301      	adds	r3, #1
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	3b01      	subs	r3, #1
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1dd      	bne.n	8007ac6 <USB_WritePMA+0x3a>
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	3734      	adds	r7, #52	; 0x34
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b08b      	sub	sp, #44	; 0x2c
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	4611      	mov	r1, r2
 8007b22:	461a      	mov	r2, r3
 8007b24:	460b      	mov	r3, r1
 8007b26:	80fb      	strh	r3, [r7, #6]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b2c:	88bb      	ldrh	r3, [r7, #4]
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	005a      	lsls	r2, r3, #1
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4e:	e01b      	b.n	8007b88 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	3302      	adds	r3, #2
 8007b80:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	3b01      	subs	r3, #1
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e0      	bne.n	8007b50 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b8e:	88bb      	ldrh	r3, [r7, #4]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	701a      	strb	r2, [r3, #0]
  }
}
 8007baa:	bf00      	nop
 8007bac:	372c      	adds	r7, #44	; 0x2c
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	2181      	movs	r1, #129	; 0x81
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fc83 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007bd2:	2010      	movs	r0, #16
 8007bd4:	f001 fd92 	bl	80096fc <USBD_static_malloc>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	e005      	b.n	8007bfa <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007c0e:	2181      	movs	r1, #129	; 0x81
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 fc84 	bl	800951e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 fd71 	bl	8009714 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d045      	beq.n	8007cfe <USBD_HID_Setup+0xba>
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	f040 80d3 	bne.w	8007e1e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	3b02      	subs	r3, #2
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d835      	bhi.n	8007cee <USBD_HID_Setup+0xaa>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBD_HID_Setup+0x44>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cdf 	.word	0x08007cdf
 8007c8c:	08007cbf 	.word	0x08007cbf
 8007c90:	08007cef 	.word	0x08007cef
 8007c94:	08007cef 	.word	0x08007cef
 8007c98:	08007cef 	.word	0x08007cef
 8007c9c:	08007cef 	.word	0x08007cef
 8007ca0:	08007cef 	.word	0x08007cef
 8007ca4:	08007cef 	.word	0x08007cef
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cb1 	.word	0x08007cb1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	601a      	str	r2, [r3, #0]
          break;
 8007cbc:	e01e      	b.n	8007cfc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f944 	bl	8008f52 <USBD_CtlSendData>
          break;
 8007cca:	e017      	b.n	8007cfc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	0a1b      	lsrs	r3, r3, #8
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]
          break;
 8007cdc:	e00e      	b.n	8007cfc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f933 	bl	8008f52 <USBD_CtlSendData>
          break;
 8007cec:	e006      	b.n	8007cfc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f8c4 	bl	8008e7e <USBD_CtlError>
          ret = USBD_FAIL;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8007cfa:	bf00      	nop
      }
      break;
 8007cfc:	e096      	b.n	8007e2c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	2b0b      	cmp	r3, #11
 8007d04:	f200 8083 	bhi.w	8007e0e <USBD_HID_Setup+0x1ca>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_HID_Setup+0xcc>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007e0f 	.word	0x08007e0f
 8007d18:	08007e0f 	.word	0x08007e0f
 8007d1c:	08007e0f 	.word	0x08007e0f
 8007d20:	08007e0f 	.word	0x08007e0f
 8007d24:	08007e0f 	.word	0x08007e0f
 8007d28:	08007d69 	.word	0x08007d69
 8007d2c:	08007e0f 	.word	0x08007e0f
 8007d30:	08007e0f 	.word	0x08007e0f
 8007d34:	08007e0f 	.word	0x08007e0f
 8007d38:	08007dc1 	.word	0x08007dc1
 8007d3c:	08007de9 	.word	0x08007de9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d107      	bne.n	8007d5a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d4a:	f107 030e 	add.w	r3, r7, #14
 8007d4e:	2202      	movs	r2, #2
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f8fd 	bl	8008f52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d58:	e060      	b.n	8007e1c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f88e 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d62:	2302      	movs	r3, #2
 8007d64:	75fb      	strb	r3, [r7, #23]
          break;
 8007d66:	e059      	b.n	8007e1c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	885b      	ldrh	r3, [r3, #2]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b22      	cmp	r3, #34	; 0x22
 8007d72:	d108      	bne.n	8007d86 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b3f      	cmp	r3, #63	; 0x3f
 8007d7a:	bf28      	it	cs
 8007d7c:	233f      	movcs	r3, #63	; 0x3f
 8007d7e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007d80:	4b2d      	ldr	r3, [pc, #180]	; (8007e38 <USBD_HID_Setup+0x1f4>)
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e015      	b.n	8007db2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b21      	cmp	r3, #33	; 0x21
 8007d90:	d108      	bne.n	8007da4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007d92:	4b2a      	ldr	r3, [pc, #168]	; (8007e3c <USBD_HID_Setup+0x1f8>)
 8007d94:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	88db      	ldrh	r3, [r3, #6]
 8007d9a:	2b09      	cmp	r3, #9
 8007d9c:	bf28      	it	cs
 8007d9e:	2309      	movcs	r3, #9
 8007da0:	83fb      	strh	r3, [r7, #30]
 8007da2:	e006      	b.n	8007db2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f869 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8007dac:	2302      	movs	r3, #2
 8007dae:	75fb      	strb	r3, [r7, #23]
            break;
 8007db0:	e034      	b.n	8007e1c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007db2:	8bfb      	ldrh	r3, [r7, #30]
 8007db4:	461a      	mov	r2, r3
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f8ca 	bl	8008f52 <USBD_CtlSendData>
          break;
 8007dbe:	e02d      	b.n	8007e1c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d107      	bne.n	8007dda <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f8bd 	bl	8008f52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dd8:	e020      	b.n	8007e1c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 f84e 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8007de2:	2302      	movs	r3, #2
 8007de4:	75fb      	strb	r3, [r7, #23]
          break;
 8007de6:	e019      	b.n	8007e1c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d106      	bne.n	8007e00 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dfe:	e00d      	b.n	8007e1c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 f83b 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e0c:	e006      	b.n	8007e1c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f834 	bl	8008e7e <USBD_CtlError>
          ret = USBD_FAIL;
 8007e16:	2302      	movs	r3, #2
 8007e18:	75fb      	strb	r3, [r7, #23]
          break;
 8007e1a:	bf00      	nop
      }
      break;
 8007e1c:	e006      	b.n	8007e2c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f82c 	bl	8008e7e <USBD_CtlError>
      ret = USBD_FAIL;
 8007e26:	2302      	movs	r3, #2
 8007e28:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2a:	bf00      	nop
  }

  return ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	200000c8 	.word	0x200000c8
 8007e3c:	200000b0 	.word	0x200000b0

08007e40 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d10c      	bne.n	8007e7a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	7b1b      	ldrb	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d108      	bne.n	8007e7a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	2181      	movs	r1, #129	; 0x81
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 fbfa 	bl	800966e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2222      	movs	r2, #34	; 0x22
 8007e90:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007e92:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000044 	.word	0x20000044

08007ea4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2222      	movs	r2, #34	; 0x22
 8007eb0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000068 	.word	0x20000068

08007ec4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2222      	movs	r2, #34	; 0x22
 8007ed0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	2000008c 	.word	0x2000008c

08007ee4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
	...

08007f08 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	220a      	movs	r2, #10
 8007f14:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007f16:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	200000bc 	.word	0x200000bc

08007f28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e01a      	b.n	8007f76 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	79fa      	ldrb	r2, [r7, #7]
 8007f6c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f001 fa4c 	bl	800940c <USBD_LL_Init>

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d006      	beq.n	8007fa0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
 8007f9e:	e001      	b.n	8007fa4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fa6f 	bl	800949c <USBD_LL_Start>

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00c      	beq.n	8008010 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3

  return USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fed7 	bl	8008e06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2b02      	cmp	r3, #2
 800807a:	d016      	beq.n	80080aa <USBD_LL_SetupStage+0x6a>
 800807c:	2b02      	cmp	r3, #2
 800807e:	d81c      	bhi.n	80080ba <USBD_LL_SetupStage+0x7a>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <USBD_LL_SetupStage+0x4a>
 8008084:	2b01      	cmp	r3, #1
 8008086:	d008      	beq.n	800809a <USBD_LL_SetupStage+0x5a>
 8008088:	e017      	b.n	80080ba <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9ca 	bl	800842c <USBD_StdDevReq>
      break;
 8008098:	e01a      	b.n	80080d0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa2c 	bl	8008500 <USBD_StdItfReq>
      break;
 80080a8:	e012      	b.n	80080d0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa6c 	bl	8008590 <USBD_StdEPReq>
      break;
 80080b8:	e00a      	b.n	80080d0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fa47 	bl	800955c <USBD_LL_StallEP>
      break;
 80080ce:	bf00      	nop
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	460b      	mov	r3, r1
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d14b      	bne.n	8008186 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d134      	bne.n	800816a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	d919      	bls.n	8008140 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	1ad2      	subs	r2, r2, r3
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008122:	429a      	cmp	r2, r3
 8008124:	d203      	bcs.n	800812e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800812a:	b29b      	uxth	r3, r3
 800812c:	e002      	b.n	8008134 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 ff38 	bl	8008fae <USBD_CtlContinueRx>
 800813e:	e038      	b.n	80081b2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008152:	2b03      	cmp	r3, #3
 8008154:	d105      	bne.n	8008162 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 ff35 	bl	8008fd2 <USBD_CtlSendStatus>
 8008168:	e023      	b.n	80081b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	2b05      	cmp	r3, #5
 8008172:	d11e      	bne.n	80081b2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f001 f9ec 	bl	800955c <USBD_LL_StallEP>
 8008184:	e015      	b.n	80081b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008198:	2b03      	cmp	r3, #3
 800819a:	d108      	bne.n	80081ae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	7afa      	ldrb	r2, [r7, #11]
 80081a6:	4611      	mov	r1, r2
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	4798      	blx	r3
 80081ac:	e001      	b.n	80081b2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ae:	2302      	movs	r3, #2
 80081b0:	e000      	b.n	80081b4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	460b      	mov	r3, r1
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d17f      	bne.n	80082d0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3314      	adds	r3, #20
 80081d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d15c      	bne.n	800829a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d915      	bls.n	8008218 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fec0 	bl	8008f8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f001 fa4f 	bl	80096b4 <USBD_LL_PrepareReceive>
 8008216:	e04e      	b.n	80082b6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	6912      	ldr	r2, [r2, #16]
 8008220:	fbb3 f1f2 	udiv	r1, r3, r2
 8008224:	fb01 f202 	mul.w	r2, r1, r2
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d11c      	bne.n	8008268 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008236:	429a      	cmp	r2, r3
 8008238:	d316      	bcc.n	8008268 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008244:	429a      	cmp	r2, r3
 8008246:	d20f      	bcs.n	8008268 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fe9c 	bl	8008f8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800825a:	2300      	movs	r3, #0
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f001 fa27 	bl	80096b4 <USBD_LL_PrepareReceive>
 8008266:	e026      	b.n	80082b6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800827a:	2b03      	cmp	r3, #3
 800827c:	d105      	bne.n	800828a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 f965 	bl	800955c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 feb0 	bl	8008ff8 <USBD_CtlReceiveStatus>
 8008298:	e00d      	b.n	80082b6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d004      	beq.n	80082ae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082ae:	2180      	movs	r1, #128	; 0x80
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f001 f953 	bl	800955c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d11d      	bne.n	80082fc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff fe81 	bl	8007fc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082ce:	e015      	b.n	80082fc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00d      	beq.n	80082f8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d108      	bne.n	80082f8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	7afa      	ldrb	r2, [r7, #11]
 80082f0:	4611      	mov	r1, r2
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	4798      	blx	r3
 80082f6:	e001      	b.n	80082fc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	e000      	b.n	80082fe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800830e:	2340      	movs	r3, #64	; 0x40
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f8dc 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2240      	movs	r2, #64	; 0x40
 8008326:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	2200      	movs	r2, #0
 800832e:	2180      	movs	r1, #128	; 0x80
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f8ce 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2240      	movs	r2, #64	; 0x40
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6852      	ldr	r2, [r2, #4]
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	4611      	mov	r1, r2
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
  }

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr

080083a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d105      	bne.n	80083ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	2b03      	cmp	r3, #3
 8008408:	d10b      	bne.n	8008422 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d005      	beq.n	8008452 <USBD_StdDevReq+0x26>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d84f      	bhi.n	80084ea <USBD_StdDevReq+0xbe>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <USBD_StdDevReq+0x36>
 800844e:	2b20      	cmp	r3, #32
 8008450:	d14b      	bne.n	80084ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	4798      	blx	r3
      break;
 8008460:	e048      	b.n	80084f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d839      	bhi.n	80084de <USBD_StdDevReq+0xb2>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <USBD_StdDevReq+0x44>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084c1 	.word	0x080084c1
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084df 	.word	0x080084df
 800847c:	080084cb 	.word	0x080084cb
 8008480:	080084df 	.word	0x080084df
 8008484:	080084a3 	.word	0x080084a3
 8008488:	08008499 	.word	0x08008499
 800848c:	080084df 	.word	0x080084df
 8008490:	080084b7 	.word	0x080084b7
 8008494:	080084ad 	.word	0x080084ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9dc 	bl	8008858 <USBD_GetDescriptor>
          break;
 80084a0:	e022      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb3f 	bl	8008b28 <USBD_SetAddress>
          break;
 80084aa:	e01d      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fb7e 	bl	8008bb0 <USBD_SetConfig>
          break;
 80084b4:	e018      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fc07 	bl	8008ccc <USBD_GetConfig>
          break;
 80084be:	e013      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fc37 	bl	8008d36 <USBD_GetStatus>
          break;
 80084c8:	e00e      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc65 	bl	8008d9c <USBD_SetFeature>
          break;
 80084d2:	e009      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc74 	bl	8008dc4 <USBD_ClrFeature>
          break;
 80084dc:	e004      	b.n	80084e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fccc 	bl	8008e7e <USBD_CtlError>
          break;
 80084e6:	bf00      	nop
      }
      break;
 80084e8:	e004      	b.n	80084f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fcc6 	bl	8008e7e <USBD_CtlError>
      break;
 80084f2:	bf00      	nop
  }

  return ret;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop

08008500 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008516:	2b40      	cmp	r3, #64	; 0x40
 8008518:	d005      	beq.n	8008526 <USBD_StdItfReq+0x26>
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d82e      	bhi.n	800857c <USBD_StdItfReq+0x7c>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <USBD_StdItfReq+0x26>
 8008522:	2b20      	cmp	r3, #32
 8008524:	d12a      	bne.n	800857c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	3b01      	subs	r3, #1
 800852e:	2b02      	cmp	r3, #2
 8008530:	d81d      	bhi.n	800856e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	d813      	bhi.n	8008564 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	4798      	blx	r3
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d110      	bne.n	8008578 <USBD_StdItfReq+0x78>
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fd38 	bl	8008fd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008562:	e009      	b.n	8008578 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc89 	bl	8008e7e <USBD_CtlError>
          break;
 800856c:	e004      	b.n	8008578 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc84 	bl	8008e7e <USBD_CtlError>
          break;
 8008576:	e000      	b.n	800857a <USBD_StdItfReq+0x7a>
          break;
 8008578:	bf00      	nop
      }
      break;
 800857a:	e004      	b.n	8008586 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc7d 	bl	8008e7e <USBD_CtlError>
      break;
 8008584:	bf00      	nop
  }

  return USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	889b      	ldrh	r3, [r3, #4]
 80085a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d007      	beq.n	80085c0 <USBD_StdEPReq+0x30>
 80085b0:	2b40      	cmp	r3, #64	; 0x40
 80085b2:	f200 8146 	bhi.w	8008842 <USBD_StdEPReq+0x2b2>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <USBD_StdEPReq+0x40>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	f040 8141 	bne.w	8008842 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
      break;
 80085ce:	e13d      	b.n	800884c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d10a      	bne.n	80085f2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

        return ret;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	e12d      	b.n	800884e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d007      	beq.n	800860a <USBD_StdEPReq+0x7a>
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	f300 811b 	bgt.w	8008836 <USBD_StdEPReq+0x2a6>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d072      	beq.n	80086ea <USBD_StdEPReq+0x15a>
 8008604:	2b01      	cmp	r3, #1
 8008606:	d03a      	beq.n	800867e <USBD_StdEPReq+0xee>
 8008608:	e115      	b.n	8008836 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008610:	2b02      	cmp	r3, #2
 8008612:	d002      	beq.n	800861a <USBD_StdEPReq+0x8a>
 8008614:	2b03      	cmp	r3, #3
 8008616:	d015      	beq.n	8008644 <USBD_StdEPReq+0xb4>
 8008618:	e02b      	b.n	8008672 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <USBD_StdEPReq+0xaa>
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d009      	beq.n	800863a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 ff96 	bl	800955c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 ff92 	bl	800955c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008638:	e020      	b.n	800867c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc1e 	bl	8008e7e <USBD_CtlError>
              break;
 8008642:	e01b      	b.n	800867c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	885b      	ldrh	r3, [r3, #2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10e      	bne.n	800866a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <USBD_StdEPReq+0xda>
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b80      	cmp	r3, #128	; 0x80
 8008656:	d008      	beq.n	800866a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	88db      	ldrh	r3, [r3, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 ff79 	bl	800955c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fcb1 	bl	8008fd2 <USBD_CtlSendStatus>

              break;
 8008670:	e004      	b.n	800867c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc02 	bl	8008e7e <USBD_CtlError>
              break;
 800867a:	bf00      	nop
          }
          break;
 800867c:	e0e0      	b.n	8008840 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	2b02      	cmp	r3, #2
 8008686:	d002      	beq.n	800868e <USBD_StdEPReq+0xfe>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d015      	beq.n	80086b8 <USBD_StdEPReq+0x128>
 800868c:	e026      	b.n	80086dc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <USBD_StdEPReq+0x11e>
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d009      	beq.n	80086ae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ff5c 	bl	800955c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 ff58 	bl	800955c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086ac:	e01c      	b.n	80086e8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fbe4 	bl	8008e7e <USBD_CtlError>
              break;
 80086b6:	e017      	b.n	80086e8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	885b      	ldrh	r3, [r3, #2]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d112      	bne.n	80086e6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 ff63 	bl	800959a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fc7c 	bl	8008fd2 <USBD_CtlSendStatus>
              }
              break;
 80086da:	e004      	b.n	80086e6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fbcd 	bl	8008e7e <USBD_CtlError>
              break;
 80086e4:	e000      	b.n	80086e8 <USBD_StdEPReq+0x158>
              break;
 80086e6:	bf00      	nop
          }
          break;
 80086e8:	e0aa      	b.n	8008840 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d002      	beq.n	80086fa <USBD_StdEPReq+0x16a>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d032      	beq.n	800875e <USBD_StdEPReq+0x1ce>
 80086f8:	e097      	b.n	800882a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <USBD_StdEPReq+0x180>
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b80      	cmp	r3, #128	; 0x80
 8008704:	d004      	beq.n	8008710 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fbb8 	bl	8008e7e <USBD_CtlError>
                break;
 800870e:	e091      	b.n	8008834 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	da0b      	bge.n	8008730 <USBD_StdEPReq+0x1a0>
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	3310      	adds	r3, #16
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4413      	add	r3, r2
 800872c:	3304      	adds	r3, #4
 800872e:	e00b      	b.n	8008748 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4413      	add	r3, r2
 8008746:	3304      	adds	r3, #4
 8008748:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2202      	movs	r2, #2
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbfb 	bl	8008f52 <USBD_CtlSendData>
              break;
 800875c:	e06a      	b.n	8008834 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800875e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	da11      	bge.n	800878a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3318      	adds	r3, #24
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d117      	bne.n	80087b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb7b 	bl	8008e7e <USBD_CtlError>
                  break;
 8008788:	e054      	b.n	8008834 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fb68 	bl	8008e7e <USBD_CtlError>
                  break;
 80087ae:	e041      	b.n	8008834 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0b      	bge.n	80087d0 <USBD_StdEPReq+0x240>
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	3310      	adds	r3, #16
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	4413      	add	r3, r2
 80087cc:	3304      	adds	r3, #4
 80087ce:	e00b      	b.n	80087e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
 80087d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	4413      	add	r3, r2
 80087e6:	3304      	adds	r3, #4
 80087e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <USBD_StdEPReq+0x266>
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d103      	bne.n	80087fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e00e      	b.n	800881c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fee8 	bl	80095d8 <USBD_LL_IsStallEP>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	e002      	b.n	800881c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2202      	movs	r2, #2
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fb95 	bl	8008f52 <USBD_CtlSendData>
              break;
 8008828:	e004      	b.n	8008834 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb26 	bl	8008e7e <USBD_CtlError>
              break;
 8008832:	bf00      	nop
          }
          break;
 8008834:	e004      	b.n	8008840 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb20 	bl	8008e7e <USBD_CtlError>
          break;
 800883e:	bf00      	nop
      }
      break;
 8008840:	e004      	b.n	800884c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fb1a 	bl	8008e7e <USBD_CtlError>
      break;
 800884a:	bf00      	nop
  }

  return ret;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	885b      	ldrh	r3, [r3, #2]
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	2b06      	cmp	r3, #6
 800887a:	f200 8128 	bhi.w	8008ace <USBD_GetDescriptor+0x276>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <USBD_GetDescriptor+0x2c>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a1 	.word	0x080088a1
 8008888:	080088b9 	.word	0x080088b9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	08008acf 	.word	0x08008acf
 8008894:	08008acf 	.word	0x08008acf
 8008898:	08008a6f 	.word	0x08008a6f
 800889c:	08008a9b 	.word	0x08008a9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
      break;
 80088b6:	e112      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7c1b      	ldrb	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f107 0208 	add.w	r2, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088da:	e100      	b.n	8008ade <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	f107 0208 	add.w	r2, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	2202      	movs	r2, #2
 80088f4:	701a      	strb	r2, [r3, #0]
      break;
 80088f6:	e0f2      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b05      	cmp	r3, #5
 8008900:	f200 80ac 	bhi.w	8008a5c <USBD_GetDescriptor+0x204>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <USBD_GetDescriptor+0xb4>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008925 	.word	0x08008925
 8008910:	08008959 	.word	0x08008959
 8008914:	0800898d 	.word	0x0800898d
 8008918:	080089c1 	.word	0x080089c1
 800891c:	080089f5 	.word	0x080089f5
 8008920:	08008a29 	.word	0x08008a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e091      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa97 	bl	8008e7e <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e089      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e077      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa7d 	bl	8008e7e <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e06f      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e05d      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa63 	bl	8008e7e <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e055      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e043      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa49 	bl	8008e7e <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e03b      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e029      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa2f 	bl	8008e7e <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e021      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e00f      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa15 	bl	8008e7e <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e007      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa0d 	bl	8008e7e <USBD_CtlError>
          err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a6a:	e038      	b.n	8008ade <USBD_GetDescriptor+0x286>
 8008a6c:	e037      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7c1b      	ldrb	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f107 0208 	add.w	r2, r7, #8
 8008a82:	4610      	mov	r0, r2
 8008a84:	4798      	blx	r3
 8008a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a88:	e029      	b.n	8008ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f9f6 	bl	8008e7e <USBD_CtlError>
        err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
      break;
 8008a98:	e021      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10d      	bne.n	8008abe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	2207      	movs	r2, #7
 8008aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008abc:	e00f      	b.n	8008ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9dc 	bl	8008e7e <USBD_CtlError>
        err++;
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	72fb      	strb	r3, [r7, #11]
      break;
 8008acc:	e007      	b.n	8008ade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9d4 	bl	8008e7e <USBD_CtlError>
      err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
      break;
 8008adc:	bf00      	nop
  }

  if (err != 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11c      	bne.n	8008b1e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ae4:	893b      	ldrh	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <USBD_GetDescriptor+0x2b6>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	88db      	ldrh	r3, [r3, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88da      	ldrh	r2, [r3, #6]
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bf28      	it	cs
 8008afc:	4613      	movcs	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	461a      	mov	r2, r3
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fa22 	bl	8008f52 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa5b 	bl	8008fd2 <USBD_CtlSendStatus>
 8008b1c:	e000      	b.n	8008b20 <USBD_GetDescriptor+0x2c8>
    return;
 8008b1e:	bf00      	nop
    }
  }
}
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop

08008b28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d130      	bne.n	8008b9c <USBD_SetAddress+0x74>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d12c      	bne.n	8008b9c <USBD_SetAddress+0x74>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	2b7f      	cmp	r3, #127	; 0x7f
 8008b48:	d828      	bhi.n	8008b9c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d104      	bne.n	8008b6a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f98b 	bl	8008e7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b68:	e01d      	b.n	8008ba6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7bfa      	ldrb	r2, [r7, #15]
 8008b6e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fd5a 	bl	8009630 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa28 	bl	8008fd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b90:	e009      	b.n	8008ba6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e004      	b.n	8008ba6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f96d 	bl	8008e7e <USBD_CtlError>
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008bc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc4:	4b40      	ldr	r3, [pc, #256]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d904      	bls.n	8008bd6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f955 	bl	8008e7e <USBD_CtlError>
 8008bd4:	e075      	b.n	8008cc2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_SetConfig+0x36>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d023      	beq.n	8008c2c <USBD_SetConfig+0x7c>
 8008be4:	e062      	b.n	8008cac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008be6:	4b38      	ldr	r3, [pc, #224]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01a      	beq.n	8008c24 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008bee:	4b36      	ldr	r3, [pc, #216]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c00:	4b31      	ldr	r3, [pc, #196]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f9e8 	bl	8007fdc <USBD_SetClassConfig>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d104      	bne.n	8008c1c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f932 	bl	8008e7e <USBD_CtlError>
            return;
 8008c1a:	e052      	b.n	8008cc2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f9d8 	bl	8008fd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c22:	e04e      	b.n	8008cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f9d4 	bl	8008fd2 <USBD_CtlSendStatus>
        break;
 8008c2a:	e04a      	b.n	8008cc2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c2c:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d112      	bne.n	8008c5a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008c3c:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c46:	4b20      	ldr	r3, [pc, #128]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff f9e4 	bl	800801a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9bd 	bl	8008fd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c58:	e033      	b.n	8008cc2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d01d      	beq.n	8008ca4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff f9d2 	bl	800801a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff f9a8 	bl	8007fdc <USBD_SetClassConfig>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d104      	bne.n	8008c9c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8f2 	bl	8008e7e <USBD_CtlError>
            return;
 8008c9a:	e012      	b.n	8008cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f998 	bl	8008fd2 <USBD_CtlSendStatus>
        break;
 8008ca2:	e00e      	b.n	8008cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f994 	bl	8008fd2 <USBD_CtlSendStatus>
        break;
 8008caa:	e00a      	b.n	8008cc2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f8e5 	bl	8008e7e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cb4:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <USBD_SetConfig+0x118>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff f9ad 	bl	800801a <USBD_ClrClassConfig>
        break;
 8008cc0:	bf00      	nop
    }
  }
}
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000370 	.word	0x20000370

08008ccc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d004      	beq.n	8008ce8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f8cc 	bl	8008e7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ce6:	e022      	b.n	8008d2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	dc02      	bgt.n	8008cf8 <USBD_GetConfig+0x2c>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	dc03      	bgt.n	8008cfe <USBD_GetConfig+0x32>
 8008cf6:	e015      	b.n	8008d24 <USBD_GetConfig+0x58>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d00b      	beq.n	8008d14 <USBD_GetConfig+0x48>
 8008cfc:	e012      	b.n	8008d24 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3308      	adds	r3, #8
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f920 	bl	8008f52 <USBD_CtlSendData>
        break;
 8008d12:	e00c      	b.n	8008d2e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f918 	bl	8008f52 <USBD_CtlSendData>
        break;
 8008d22:	e004      	b.n	8008d2e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8a9 	bl	8008e7e <USBD_CtlError>
        break;
 8008d2c:	bf00      	nop
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	3b01      	subs	r3, #1
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d81e      	bhi.n	8008d8a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	88db      	ldrh	r3, [r3, #6]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d004      	beq.n	8008d5e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f891 	bl	8008e7e <USBD_CtlError>
        break;
 8008d5c:	e01a      	b.n	8008d94 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f043 0202 	orr.w	r2, r3, #2
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	2202      	movs	r2, #2
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f8e5 	bl	8008f52 <USBD_CtlSendData>
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f876 	bl	8008e7e <USBD_CtlError>
      break;
 8008d92:	bf00      	nop
  }
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	885b      	ldrh	r3, [r3, #2]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d106      	bne.n	8008dbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f90b 	bl	8008fd2 <USBD_CtlSendStatus>
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d80b      	bhi.n	8008df2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d10c      	bne.n	8008dfc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8f1 	bl	8008fd2 <USBD_CtlSendStatus>
      }
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f842 	bl	8008e7e <USBD_CtlError>
      break;
 8008dfa:	e000      	b.n	8008dfe <USBD_ClrFeature+0x3a>
      break;
 8008dfc:	bf00      	nop
  }
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	785a      	ldrb	r2, [r3, #1]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	3302      	adds	r3, #2
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4413      	add	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	3305      	adds	r3, #5
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4413      	add	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3306      	adds	r3, #6
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	3307      	adds	r3, #7
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	80da      	strh	r2, [r3, #6]

}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr

08008e7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e88:	2180      	movs	r1, #128	; 0x80
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb66 	bl	800955c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb62 	bl	800955c <USBD_LL_StallEP>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d032      	beq.n	8008f1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f834 	bl	8008f24 <USBD_GetLen>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	75fa      	strb	r2, [r7, #23]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	7812      	ldrb	r2, [r2, #0]
 8008eda:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	75fa      	strb	r2, [r7, #23]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	2203      	movs	r2, #3
 8008eea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008eec:	e012      	b.n	8008f14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	60fa      	str	r2, [r7, #12]
 8008ef4:	7dfa      	ldrb	r2, [r7, #23]
 8008ef6:	1c51      	adds	r1, r2, #1
 8008ef8:	75f9      	strb	r1, [r7, #23]
 8008efa:	4611      	mov	r1, r2
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	440a      	add	r2, r1
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	75fa      	strb	r2, [r7, #23]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e8      	bne.n	8008eee <USBD_GetString+0x4e>
    }
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f30:	e005      	b.n	8008f3e <USBD_GetLen+0x1a>
  {
    len++;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	3301      	adds	r3, #1
 8008f36:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f5      	bne.n	8008f32 <USBD_GetLen+0xe>
  }

  return len;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f68:	88fa      	ldrh	r2, [r7, #6]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fb77 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fb65 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fb76 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2204      	movs	r2, #4
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb40 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2205      	movs	r2, #5
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fb50 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009024:	2200      	movs	r2, #0
 8009026:	490e      	ldr	r1, [pc, #56]	; (8009060 <MX_USB_DEVICE_Init+0x40>)
 8009028:	480e      	ldr	r0, [pc, #56]	; (8009064 <MX_USB_DEVICE_Init+0x44>)
 800902a:	f7fe ff7d 	bl	8007f28 <USBD_Init>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009034:	f7f7 fc8e 	bl	8000954 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009038:	490b      	ldr	r1, [pc, #44]	; (8009068 <MX_USB_DEVICE_Init+0x48>)
 800903a:	480a      	ldr	r0, [pc, #40]	; (8009064 <MX_USB_DEVICE_Init+0x44>)
 800903c:	f7fe ff9f 	bl	8007f7e <USBD_RegisterClass>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009046:	f7f7 fc85 	bl	8000954 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800904a:	4806      	ldr	r0, [pc, #24]	; (8009064 <MX_USB_DEVICE_Init+0x44>)
 800904c:	f7fe ffb0 	bl	8007fb0 <USBD_Start>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009056:	f7f7 fc7d 	bl	8000954 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000108 	.word	0x20000108
 8009064:	20000374 	.word	0x20000374
 8009068:	2000000c 	.word	0x2000000c

0800906c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2212      	movs	r2, #18
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800907e:	4b03      	ldr	r3, [pc, #12]	; (800908c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000124 	.word	0x20000124

08009090 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2204      	movs	r2, #4
 80090a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090a2:	4b03      	ldr	r3, [pc, #12]	; (80090b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000138 	.word	0x20000138

080090b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	4907      	ldr	r1, [pc, #28]	; (80090e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ca:	4808      	ldr	r0, [pc, #32]	; (80090ec <USBD_FS_ProductStrDescriptor+0x38>)
 80090cc:	f7ff fee8 	bl	8008ea0 <USBD_GetString>
 80090d0:	e004      	b.n	80090dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	4904      	ldr	r1, [pc, #16]	; (80090e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80090d6:	4805      	ldr	r0, [pc, #20]	; (80090ec <USBD_FS_ProductStrDescriptor+0x38>)
 80090d8:	f7ff fee2 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20000638 	.word	0x20000638
 80090ec:	0800a168 	.word	0x0800a168

080090f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	4904      	ldr	r1, [pc, #16]	; (8009110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009100:	4804      	ldr	r0, [pc, #16]	; (8009114 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009102:	f7ff fecd 	bl	8008ea0 <USBD_GetString>
  return USBD_StrDesc;
 8009106:	4b02      	ldr	r3, [pc, #8]	; (8009110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000638 	.word	0x20000638
 8009114:	0800a180 	.word	0x0800a180

08009118 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	221a      	movs	r2, #26
 8009128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800912a:	f000 f843 	bl	80091b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800912e:	4b02      	ldr	r3, [pc, #8]	; (8009138 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	2000013c 	.word	0x2000013c

0800913c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	4907      	ldr	r1, [pc, #28]	; (8009170 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009152:	4808      	ldr	r0, [pc, #32]	; (8009174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009154:	f7ff fea4 	bl	8008ea0 <USBD_GetString>
 8009158:	e004      	b.n	8009164 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	4904      	ldr	r1, [pc, #16]	; (8009170 <USBD_FS_ConfigStrDescriptor+0x34>)
 800915e:	4805      	ldr	r0, [pc, #20]	; (8009174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009160:	f7ff fe9e 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000638 	.word	0x20000638
 8009174:	0800a194 	.word	0x0800a194

08009178 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4907      	ldr	r1, [pc, #28]	; (80091ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800918e:	4808      	ldr	r0, [pc, #32]	; (80091b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009190:	f7ff fe86 	bl	8008ea0 <USBD_GetString>
 8009194:	e004      	b.n	80091a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4904      	ldr	r1, [pc, #16]	; (80091ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800919c:	f7ff fe80 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000638 	.word	0x20000638
 80091b0:	0800a1a0 	.word	0x0800a1a0

080091b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091ba:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <Get_SerialNum+0x44>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <Get_SerialNum+0x48>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091c6:	4b0e      	ldr	r3, [pc, #56]	; (8009200 <Get_SerialNum+0x4c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091da:	2208      	movs	r2, #8
 80091dc:	4909      	ldr	r1, [pc, #36]	; (8009204 <Get_SerialNum+0x50>)
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f814 	bl	800920c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091e4:	2204      	movs	r2, #4
 80091e6:	4908      	ldr	r1, [pc, #32]	; (8009208 <Get_SerialNum+0x54>)
 80091e8:	68b8      	ldr	r0, [r7, #8]
 80091ea:	f000 f80f 	bl	800920c <IntToUnicode>
  }
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	1ffff7e8 	.word	0x1ffff7e8
 80091fc:	1ffff7ec 	.word	0x1ffff7ec
 8009200:	1ffff7f0 	.word	0x1ffff7f0
 8009204:	2000013e 	.word	0x2000013e
 8009208:	2000014e 	.word	0x2000014e

0800920c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]
 8009222:	e027      	b.n	8009274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	0f1b      	lsrs	r3, r3, #28
 8009228:	2b09      	cmp	r3, #9
 800922a:	d80b      	bhi.n	8009244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	0f1b      	lsrs	r3, r3, #28
 8009230:	b2da      	uxtb	r2, r3
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	4619      	mov	r1, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	440b      	add	r3, r1
 800923c:	3230      	adds	r2, #48	; 0x30
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e00a      	b.n	800925a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0f1b      	lsrs	r3, r3, #28
 8009248:	b2da      	uxtb	r2, r3
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4619      	mov	r1, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	440b      	add	r3, r1
 8009254:	3237      	adds	r2, #55	; 0x37
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	3301      	adds	r3, #1
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	3301      	adds	r3, #1
 8009272:	75fb      	strb	r3, [r7, #23]
 8009274:	7dfa      	ldrb	r2, [r7, #23]
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	429a      	cmp	r2, r3
 800927a:	d3d3      	bcc.n	8009224 <IntToUnicode+0x18>
  }
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a0d      	ldr	r2, [pc, #52]	; (80092cc <HAL_PCD_MspInit+0x44>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d113      	bne.n	80092c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800929a:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <HAL_PCD_MspInit+0x48>)
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	4a0c      	ldr	r2, [pc, #48]	; (80092d0 <HAL_PCD_MspInit+0x48>)
 80092a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092a4:	61d3      	str	r3, [r2, #28]
 80092a6:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <HAL_PCD_MspInit+0x48>)
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80092b2:	2200      	movs	r2, #0
 80092b4:	2100      	movs	r1, #0
 80092b6:	2014      	movs	r0, #20
 80092b8:	f7f7 ff3b 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80092bc:	2014      	movs	r0, #20
 80092be:	f7f7 ff54 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40005c00 	.word	0x40005c00
 80092d0:	40021000 	.word	0x40021000

080092d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fe fea8 	bl	8008040 <USBD_LL_SetupStage>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	440b      	add	r3, r1
 8009318:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	4619      	mov	r1, r3
 8009322:	f7fe feda 	bl	80080da <USBD_LL_DataOutStage>
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009340:	78fa      	ldrb	r2, [r7, #3]
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	440b      	add	r3, r1
 800934e:	333c      	adds	r3, #60	; 0x3c
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	4619      	mov	r1, r3
 8009356:	f7fe ff31 	bl	80081bc <USBD_LL_DataInStage>
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff f841 	bl	80083f8 <USBD_LL_SOF>
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009386:	2301      	movs	r3, #1
 8009388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d001      	beq.n	8009396 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009392:	f7f7 fadf 	bl	8000954 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800939c:	7bfa      	ldrb	r2, [r7, #15]
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fff1 	bl	8008388 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe ffaa 	bl	8008306 <USBD_LL_Reset>
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe ffeb 	bl	80083a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093d8:	4b04      	ldr	r3, [pc, #16]	; (80093ec <HAL_PCD_SuspendCallback+0x30>)
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	4a03      	ldr	r2, [pc, #12]	; (80093ec <HAL_PCD_SuspendCallback+0x30>)
 80093de:	f043 0306 	orr.w	r3, r3, #6
 80093e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	e000ed00 	.word	0xe000ed00

080093f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe ffe5 	bl	80083ce <USBD_LL_Resume>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009414:	4a1f      	ldr	r2, [pc, #124]	; (8009494 <USBD_LL_Init+0x88>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1d      	ldr	r2, [pc, #116]	; (8009494 <USBD_LL_Init+0x88>)
 8009420:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009424:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <USBD_LL_Init+0x88>)
 8009426:	4a1c      	ldr	r2, [pc, #112]	; (8009498 <USBD_LL_Init+0x8c>)
 8009428:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800942a:	4b1a      	ldr	r3, [pc, #104]	; (8009494 <USBD_LL_Init+0x88>)
 800942c:	2208      	movs	r2, #8
 800942e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009430:	4b18      	ldr	r3, [pc, #96]	; (8009494 <USBD_LL_Init+0x88>)
 8009432:	2202      	movs	r2, #2
 8009434:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009436:	4b17      	ldr	r3, [pc, #92]	; (8009494 <USBD_LL_Init+0x88>)
 8009438:	2200      	movs	r2, #0
 800943a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800943c:	4b15      	ldr	r3, [pc, #84]	; (8009494 <USBD_LL_Init+0x88>)
 800943e:	2200      	movs	r2, #0
 8009440:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009442:	4b14      	ldr	r3, [pc, #80]	; (8009494 <USBD_LL_Init+0x88>)
 8009444:	2200      	movs	r2, #0
 8009446:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009448:	4812      	ldr	r0, [pc, #72]	; (8009494 <USBD_LL_Init+0x88>)
 800944a:	f7f8 fa6e 	bl	800192a <HAL_PCD_Init>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009454:	f7f7 fa7e 	bl	8000954 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800945e:	2318      	movs	r3, #24
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	f7f9 fecb 	bl	80031fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800946e:	2358      	movs	r3, #88	; 0x58
 8009470:	2200      	movs	r2, #0
 8009472:	2180      	movs	r1, #128	; 0x80
 8009474:	f7f9 fec3 	bl	80031fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800947e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009482:	2200      	movs	r2, #0
 8009484:	2181      	movs	r1, #129	; 0x81
 8009486:	f7f9 feba 	bl	80031fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000838 	.word	0x20000838
 8009498:	40005c00 	.word	0x40005c00

0800949c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f8 fb44 	bl	8001b40 <HAL_PCD_Start>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f93c 	bl	800973c <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	461a      	mov	r2, r3
 80094e0:	4603      	mov	r3, r0
 80094e2:	70fb      	strb	r3, [r7, #3]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70bb      	strb	r3, [r7, #2]
 80094e8:	4613      	mov	r3, r2
 80094ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094fa:	78bb      	ldrb	r3, [r7, #2]
 80094fc:	883a      	ldrh	r2, [r7, #0]
 80094fe:	78f9      	ldrb	r1, [r7, #3]
 8009500:	f7f8 fcbc 	bl	8001e7c <HAL_PCD_EP_Open>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f916 	bl	800973c <USBD_Get_USB_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009514:	7bbb      	ldrb	r3, [r7, #14]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f7f8 fd03 	bl	8001f48 <HAL_PCD_EP_Close>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f8f7 	bl	800973c <USBD_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009552:	7bbb      	ldrb	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7f8 fdac 	bl	80020d8 <HAL_PCD_EP_SetStall>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f8d8 	bl	800973c <USBD_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009590:	7bbb      	ldrb	r3, [r7, #14]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7f8 fded 	bl	8002198 <HAL_PCD_EP_ClrStall>
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f8b9 	bl	800973c <USBD_Get_USB_Status>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da0c      	bge.n	800960e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	440b      	add	r3, r1
 8009608:	3302      	adds	r3, #2
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	e00b      	b.n	8009626 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	440b      	add	r3, r1
 8009620:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009624:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7f8 fbef 	bl	8001e32 <HAL_PCD_SetAddress>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f86e 	bl	800973c <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009664:	7bbb      	ldrb	r3, [r7, #14]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	461a      	mov	r2, r3
 800967a:	460b      	mov	r3, r1
 800967c:	72fb      	strb	r3, [r7, #11]
 800967e:	4613      	mov	r3, r2
 8009680:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009690:	893b      	ldrh	r3, [r7, #8]
 8009692:	7af9      	ldrb	r1, [r7, #11]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	f7f8 fcdc 	bl	8002052 <HAL_PCD_EP_Transmit>
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f84b 	bl	800973c <USBD_Get_USB_Status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	461a      	mov	r2, r3
 80096c0:	460b      	mov	r3, r1
 80096c2:	72fb      	strb	r3, [r7, #11]
 80096c4:	4613      	mov	r3, r2
 80096c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096d6:	893b      	ldrh	r3, [r7, #8]
 80096d8:	7af9      	ldrb	r1, [r7, #11]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	f7f8 fc7c 	bl	8001fd8 <HAL_PCD_EP_Receive>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f828 	bl	800973c <USBD_Get_USB_Status>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <USBD_static_malloc+0x14>)
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr
 8009710:	20000b24 	.word	0x20000b24

08009714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr

08009726 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr

0800973c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	2b03      	cmp	r3, #3
 800974e:	d817      	bhi.n	8009780 <USBD_Get_USB_Status+0x44>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <USBD_Get_USB_Status+0x1c>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	08009769 	.word	0x08009769
 800975c:	0800976f 	.word	0x0800976f
 8009760:	08009775 	.word	0x08009775
 8009764:	0800977b 	.word	0x0800977b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	e00b      	b.n	8009786 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800976e:	2302      	movs	r3, #2
 8009770:	73fb      	strb	r3, [r7, #15]
    break;
 8009772:	e008      	b.n	8009786 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009774:	2301      	movs	r3, #1
 8009776:	73fb      	strb	r3, [r7, #15]
    break;
 8009778:	e005      	b.n	8009786 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800977a:	2302      	movs	r3, #2
 800977c:	73fb      	strb	r3, [r7, #15]
    break;
 800977e:	e002      	b.n	8009786 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009780:	2302      	movs	r3, #2
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	bf00      	nop
  }
  return usb_status;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000158 	.word	0x20000158

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	2600      	movs	r6, #0
 80097a4:	4d0c      	ldr	r5, [pc, #48]	; (80097d8 <__libc_init_array+0x38>)
 80097a6:	4c0d      	ldr	r4, [pc, #52]	; (80097dc <__libc_init_array+0x3c>)
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	42a6      	cmp	r6, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	f000 fcb0 	bl	800a114 <_init>
 80097b4:	2600      	movs	r6, #0
 80097b6:	4d0a      	ldr	r5, [pc, #40]	; (80097e0 <__libc_init_array+0x40>)
 80097b8:	4c0a      	ldr	r4, [pc, #40]	; (80097e4 <__libc_init_array+0x44>)
 80097ba:	1b64      	subs	r4, r4, r5
 80097bc:	10a4      	asrs	r4, r4, #2
 80097be:	42a6      	cmp	r6, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c8:	4798      	blx	r3
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d2:	4798      	blx	r3
 80097d4:	3601      	adds	r6, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	0800a27c 	.word	0x0800a27c
 80097dc:	0800a27c 	.word	0x0800a27c
 80097e0:	0800a27c 	.word	0x0800a27c
 80097e4:	0800a280 	.word	0x0800a280

080097e8 <memset>:
 80097e8:	4603      	mov	r3, r0
 80097ea:	4402      	add	r2, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <siprintf>:
 80097f8:	b40e      	push	{r1, r2, r3}
 80097fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097fe:	b500      	push	{lr}
 8009800:	b09c      	sub	sp, #112	; 0x70
 8009802:	ab1d      	add	r3, sp, #116	; 0x74
 8009804:	9002      	str	r0, [sp, #8]
 8009806:	9006      	str	r0, [sp, #24]
 8009808:	9107      	str	r1, [sp, #28]
 800980a:	9104      	str	r1, [sp, #16]
 800980c:	4808      	ldr	r0, [pc, #32]	; (8009830 <siprintf+0x38>)
 800980e:	4909      	ldr	r1, [pc, #36]	; (8009834 <siprintf+0x3c>)
 8009810:	f853 2b04 	ldr.w	r2, [r3], #4
 8009814:	9105      	str	r1, [sp, #20]
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	a902      	add	r1, sp, #8
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f000 f87c 	bl	8009918 <_svfiprintf_r>
 8009820:	2200      	movs	r2, #0
 8009822:	9b02      	ldr	r3, [sp, #8]
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	b01c      	add	sp, #112	; 0x70
 8009828:	f85d eb04 	ldr.w	lr, [sp], #4
 800982c:	b003      	add	sp, #12
 800982e:	4770      	bx	lr
 8009830:	20000158 	.word	0x20000158
 8009834:	ffff0208 	.word	0xffff0208

08009838 <strncmp>:
 8009838:	4603      	mov	r3, r0
 800983a:	b510      	push	{r4, lr}
 800983c:	b172      	cbz	r2, 800985c <strncmp+0x24>
 800983e:	3901      	subs	r1, #1
 8009840:	1884      	adds	r4, r0, r2
 8009842:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009846:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800984a:	4290      	cmp	r0, r2
 800984c:	d101      	bne.n	8009852 <strncmp+0x1a>
 800984e:	42a3      	cmp	r3, r4
 8009850:	d101      	bne.n	8009856 <strncmp+0x1e>
 8009852:	1a80      	subs	r0, r0, r2
 8009854:	bd10      	pop	{r4, pc}
 8009856:	2800      	cmp	r0, #0
 8009858:	d1f3      	bne.n	8009842 <strncmp+0xa>
 800985a:	e7fa      	b.n	8009852 <strncmp+0x1a>
 800985c:	4610      	mov	r0, r2
 800985e:	e7f9      	b.n	8009854 <strncmp+0x1c>

08009860 <__ssputs_r>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	688e      	ldr	r6, [r1, #8]
 8009866:	4682      	mov	sl, r0
 8009868:	429e      	cmp	r6, r3
 800986a:	460c      	mov	r4, r1
 800986c:	4690      	mov	r8, r2
 800986e:	461f      	mov	r7, r3
 8009870:	d838      	bhi.n	80098e4 <__ssputs_r+0x84>
 8009872:	898a      	ldrh	r2, [r1, #12]
 8009874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009878:	d032      	beq.n	80098e0 <__ssputs_r+0x80>
 800987a:	6825      	ldr	r5, [r4, #0]
 800987c:	6909      	ldr	r1, [r1, #16]
 800987e:	3301      	adds	r3, #1
 8009880:	eba5 0901 	sub.w	r9, r5, r1
 8009884:	6965      	ldr	r5, [r4, #20]
 8009886:	444b      	add	r3, r9
 8009888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800988c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009890:	106d      	asrs	r5, r5, #1
 8009892:	429d      	cmp	r5, r3
 8009894:	bf38      	it	cc
 8009896:	461d      	movcc	r5, r3
 8009898:	0553      	lsls	r3, r2, #21
 800989a:	d531      	bpl.n	8009900 <__ssputs_r+0xa0>
 800989c:	4629      	mov	r1, r5
 800989e:	f000 fb6f 	bl	8009f80 <_malloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	b950      	cbnz	r0, 80098bc <__ssputs_r+0x5c>
 80098a6:	230c      	movs	r3, #12
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	f8ca 3000 	str.w	r3, [sl]
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	464a      	mov	r2, r9
 80098be:	6921      	ldr	r1, [r4, #16]
 80098c0:	f000 face 	bl	8009e60 <memcpy>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	6126      	str	r6, [r4, #16]
 80098d2:	444e      	add	r6, r9
 80098d4:	6026      	str	r6, [r4, #0]
 80098d6:	463e      	mov	r6, r7
 80098d8:	6165      	str	r5, [r4, #20]
 80098da:	eba5 0509 	sub.w	r5, r5, r9
 80098de:	60a5      	str	r5, [r4, #8]
 80098e0:	42be      	cmp	r6, r7
 80098e2:	d900      	bls.n	80098e6 <__ssputs_r+0x86>
 80098e4:	463e      	mov	r6, r7
 80098e6:	4632      	mov	r2, r6
 80098e8:	4641      	mov	r1, r8
 80098ea:	6820      	ldr	r0, [r4, #0]
 80098ec:	f000 fac6 	bl	8009e7c <memmove>
 80098f0:	68a3      	ldr	r3, [r4, #8]
 80098f2:	2000      	movs	r0, #0
 80098f4:	1b9b      	subs	r3, r3, r6
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	4433      	add	r3, r6
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	e7db      	b.n	80098b8 <__ssputs_r+0x58>
 8009900:	462a      	mov	r2, r5
 8009902:	f000 fbb1 	bl	800a068 <_realloc_r>
 8009906:	4606      	mov	r6, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d1e1      	bne.n	80098d0 <__ssputs_r+0x70>
 800990c:	4650      	mov	r0, sl
 800990e:	6921      	ldr	r1, [r4, #16]
 8009910:	f000 face 	bl	8009eb0 <_free_r>
 8009914:	e7c7      	b.n	80098a6 <__ssputs_r+0x46>
	...

08009918 <_svfiprintf_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4698      	mov	r8, r3
 800991e:	898b      	ldrh	r3, [r1, #12]
 8009920:	4607      	mov	r7, r0
 8009922:	061b      	lsls	r3, r3, #24
 8009924:	460d      	mov	r5, r1
 8009926:	4614      	mov	r4, r2
 8009928:	b09d      	sub	sp, #116	; 0x74
 800992a:	d50e      	bpl.n	800994a <_svfiprintf_r+0x32>
 800992c:	690b      	ldr	r3, [r1, #16]
 800992e:	b963      	cbnz	r3, 800994a <_svfiprintf_r+0x32>
 8009930:	2140      	movs	r1, #64	; 0x40
 8009932:	f000 fb25 	bl	8009f80 <_malloc_r>
 8009936:	6028      	str	r0, [r5, #0]
 8009938:	6128      	str	r0, [r5, #16]
 800993a:	b920      	cbnz	r0, 8009946 <_svfiprintf_r+0x2e>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e0d1      	b.n	8009aea <_svfiprintf_r+0x1d2>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	616b      	str	r3, [r5, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	2320      	movs	r3, #32
 8009950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009954:	2330      	movs	r3, #48	; 0x30
 8009956:	f04f 0901 	mov.w	r9, #1
 800995a:	f8cd 800c 	str.w	r8, [sp, #12]
 800995e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b04 <_svfiprintf_r+0x1ec>
 8009962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009966:	4623      	mov	r3, r4
 8009968:	469a      	mov	sl, r3
 800996a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996e:	b10a      	cbz	r2, 8009974 <_svfiprintf_r+0x5c>
 8009970:	2a25      	cmp	r2, #37	; 0x25
 8009972:	d1f9      	bne.n	8009968 <_svfiprintf_r+0x50>
 8009974:	ebba 0b04 	subs.w	fp, sl, r4
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x7a>
 800997a:	465b      	mov	r3, fp
 800997c:	4622      	mov	r2, r4
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ff6d 	bl	8009860 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80aa 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800998c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998e:	445a      	add	r2, fp
 8009990:	9209      	str	r2, [sp, #36]	; 0x24
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80a2 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800999c:	2300      	movs	r3, #0
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b2:	931a      	str	r3, [sp, #104]	; 0x68
 80099b4:	4654      	mov	r4, sl
 80099b6:	2205      	movs	r2, #5
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	4851      	ldr	r0, [pc, #324]	; (8009b04 <_svfiprintf_r+0x1ec>)
 80099be:	f000 fa41 	bl	8009e44 <memchr>
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	b9d8      	cbnz	r0, 80099fe <_svfiprintf_r+0xe6>
 80099c6:	06d0      	lsls	r0, r2, #27
 80099c8:	bf44      	itt	mi
 80099ca:	2320      	movmi	r3, #32
 80099cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d0:	0711      	lsls	r1, r2, #28
 80099d2:	bf44      	itt	mi
 80099d4:	232b      	movmi	r3, #43	; 0x2b
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b2a      	cmp	r3, #42	; 0x2a
 80099e0:	d015      	beq.n	8009a0e <_svfiprintf_r+0xf6>
 80099e2:	4654      	mov	r4, sl
 80099e4:	2000      	movs	r0, #0
 80099e6:	f04f 0c0a 	mov.w	ip, #10
 80099ea:	9a07      	ldr	r2, [sp, #28]
 80099ec:	4621      	mov	r1, r4
 80099ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f2:	3b30      	subs	r3, #48	; 0x30
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	d94e      	bls.n	8009a96 <_svfiprintf_r+0x17e>
 80099f8:	b1b0      	cbz	r0, 8009a28 <_svfiprintf_r+0x110>
 80099fa:	9207      	str	r2, [sp, #28]
 80099fc:	e014      	b.n	8009a28 <_svfiprintf_r+0x110>
 80099fe:	eba0 0308 	sub.w	r3, r0, r8
 8009a02:	fa09 f303 	lsl.w	r3, r9, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	46a2      	mov	sl, r4
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	e7d2      	b.n	80099b4 <_svfiprintf_r+0x9c>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbb      	ittet	lt
 8009a1a:	425b      	neglt	r3, r3
 8009a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a20:	9307      	strge	r3, [sp, #28]
 8009a22:	9307      	strlt	r3, [sp, #28]
 8009a24:	bfb8      	it	lt
 8009a26:	9204      	strlt	r2, [sp, #16]
 8009a28:	7823      	ldrb	r3, [r4, #0]
 8009a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2c:	d10c      	bne.n	8009a48 <_svfiprintf_r+0x130>
 8009a2e:	7863      	ldrb	r3, [r4, #1]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d135      	bne.n	8009aa0 <_svfiprintf_r+0x188>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	3402      	adds	r4, #2
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	9203      	str	r2, [sp, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb8      	it	lt
 8009a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009b08 <_svfiprintf_r+0x1f0>
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	4650      	mov	r0, sl
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	f000 f9f7 	bl	8009e44 <memchr>
 8009a56:	b140      	cbz	r0, 8009a6a <_svfiprintf_r+0x152>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	eba0 000a 	sub.w	r0, r0, sl
 8009a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	3401      	adds	r4, #1
 8009a66:	4303      	orrs	r3, r0
 8009a68:	9304      	str	r3, [sp, #16]
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	2206      	movs	r2, #6
 8009a70:	4826      	ldr	r0, [pc, #152]	; (8009b0c <_svfiprintf_r+0x1f4>)
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a76:	f000 f9e5 	bl	8009e44 <memchr>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d038      	beq.n	8009af0 <_svfiprintf_r+0x1d8>
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009a80:	bb1b      	cbnz	r3, 8009aca <_svfiprintf_r+0x1b2>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	3307      	adds	r3, #7
 8009a86:	f023 0307 	bic.w	r3, r3, #7
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	4433      	add	r3, r6
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	e767      	b.n	8009966 <_svfiprintf_r+0x4e>
 8009a96:	460c      	mov	r4, r1
 8009a98:	2001      	movs	r0, #1
 8009a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9e:	e7a5      	b.n	80099ec <_svfiprintf_r+0xd4>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f04f 0c0a 	mov.w	ip, #10
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	4620      	mov	r0, r4
 8009aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab2:	3a30      	subs	r2, #48	; 0x30
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d903      	bls.n	8009ac0 <_svfiprintf_r+0x1a8>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0c5      	beq.n	8009a48 <_svfiprintf_r+0x130>
 8009abc:	9105      	str	r1, [sp, #20]
 8009abe:	e7c3      	b.n	8009a48 <_svfiprintf_r+0x130>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac8:	e7f0      	b.n	8009aac <_svfiprintf_r+0x194>
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	462a      	mov	r2, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <_svfiprintf_r+0x1fc>)
 8009ad4:	a904      	add	r1, sp, #16
 8009ad6:	f3af 8000 	nop.w
 8009ada:	1c42      	adds	r2, r0, #1
 8009adc:	4606      	mov	r6, r0
 8009ade:	d1d6      	bne.n	8009a8e <_svfiprintf_r+0x176>
 8009ae0:	89ab      	ldrh	r3, [r5, #12]
 8009ae2:	065b      	lsls	r3, r3, #25
 8009ae4:	f53f af2c 	bmi.w	8009940 <_svfiprintf_r+0x28>
 8009ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aea:	b01d      	add	sp, #116	; 0x74
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	ab03      	add	r3, sp, #12
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	462a      	mov	r2, r5
 8009af6:	4638      	mov	r0, r7
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <_svfiprintf_r+0x1fc>)
 8009afa:	a904      	add	r1, sp, #16
 8009afc:	f000 f87c 	bl	8009bf8 <_printf_i>
 8009b00:	e7eb      	b.n	8009ada <_svfiprintf_r+0x1c2>
 8009b02:	bf00      	nop
 8009b04:	0800a248 	.word	0x0800a248
 8009b08:	0800a24e 	.word	0x0800a24e
 8009b0c:	0800a252 	.word	0x0800a252
 8009b10:	00000000 	.word	0x00000000
 8009b14:	08009861 	.word	0x08009861

08009b18 <_printf_common>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	4699      	mov	r9, r3
 8009b20:	688a      	ldr	r2, [r1, #8]
 8009b22:	690b      	ldr	r3, [r1, #16]
 8009b24:	4607      	mov	r7, r0
 8009b26:	4293      	cmp	r3, r2
 8009b28:	bfb8      	it	lt
 8009b2a:	4613      	movlt	r3, r2
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b32:	460c      	mov	r4, r1
 8009b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b38:	b10a      	cbz	r2, 8009b3e <_printf_common+0x26>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	6033      	str	r3, [r6, #0]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	0699      	lsls	r1, r3, #26
 8009b42:	bf42      	ittt	mi
 8009b44:	6833      	ldrmi	r3, [r6, #0]
 8009b46:	3302      	addmi	r3, #2
 8009b48:	6033      	strmi	r3, [r6, #0]
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	f015 0506 	ands.w	r5, r5, #6
 8009b50:	d106      	bne.n	8009b60 <_printf_common+0x48>
 8009b52:	f104 0a19 	add.w	sl, r4, #25
 8009b56:	68e3      	ldr	r3, [r4, #12]
 8009b58:	6832      	ldr	r2, [r6, #0]
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	dc28      	bgt.n	8009bb2 <_printf_common+0x9a>
 8009b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b64:	1e13      	subs	r3, r2, #0
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	bf18      	it	ne
 8009b6a:	2301      	movne	r3, #1
 8009b6c:	0692      	lsls	r2, r2, #26
 8009b6e:	d42d      	bmi.n	8009bcc <_printf_common+0xb4>
 8009b70:	4649      	mov	r1, r9
 8009b72:	4638      	mov	r0, r7
 8009b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b78:	47c0      	blx	r8
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d020      	beq.n	8009bc0 <_printf_common+0xa8>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	68e5      	ldr	r5, [r4, #12]
 8009b82:	f003 0306 	and.w	r3, r3, #6
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	bf18      	it	ne
 8009b8a:	2500      	movne	r5, #0
 8009b8c:	6832      	ldr	r2, [r6, #0]
 8009b8e:	f04f 0600 	mov.w	r6, #0
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	bf08      	it	eq
 8009b96:	1aad      	subeq	r5, r5, r2
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	bf08      	it	eq
 8009b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	bfc4      	itt	gt
 8009ba4:	1a9b      	subgt	r3, r3, r2
 8009ba6:	18ed      	addgt	r5, r5, r3
 8009ba8:	341a      	adds	r4, #26
 8009baa:	42b5      	cmp	r5, r6
 8009bac:	d11a      	bne.n	8009be4 <_printf_common+0xcc>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e008      	b.n	8009bc4 <_printf_common+0xac>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4638      	mov	r0, r7
 8009bba:	47c0      	blx	r8
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d103      	bne.n	8009bc8 <_printf_common+0xb0>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc8:	3501      	adds	r5, #1
 8009bca:	e7c4      	b.n	8009b56 <_printf_common+0x3e>
 8009bcc:	2030      	movs	r0, #48	; 0x30
 8009bce:	18e1      	adds	r1, r4, r3
 8009bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bda:	4422      	add	r2, r4
 8009bdc:	3302      	adds	r3, #2
 8009bde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be2:	e7c5      	b.n	8009b70 <_printf_common+0x58>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4622      	mov	r2, r4
 8009be8:	4649      	mov	r1, r9
 8009bea:	4638      	mov	r0, r7
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0e6      	beq.n	8009bc0 <_printf_common+0xa8>
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7d9      	b.n	8009baa <_printf_common+0x92>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	7e0f      	ldrb	r7, [r1, #24]
 8009bfe:	4691      	mov	r9, r2
 8009c00:	2f78      	cmp	r7, #120	; 0x78
 8009c02:	4680      	mov	r8, r0
 8009c04:	460c      	mov	r4, r1
 8009c06:	469a      	mov	sl, r3
 8009c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c0e:	d807      	bhi.n	8009c20 <_printf_i+0x28>
 8009c10:	2f62      	cmp	r7, #98	; 0x62
 8009c12:	d80a      	bhi.n	8009c2a <_printf_i+0x32>
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	f000 80d9 	beq.w	8009dcc <_printf_i+0x1d4>
 8009c1a:	2f58      	cmp	r7, #88	; 0x58
 8009c1c:	f000 80a4 	beq.w	8009d68 <_printf_i+0x170>
 8009c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c28:	e03a      	b.n	8009ca0 <_printf_i+0xa8>
 8009c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2e:	2b15      	cmp	r3, #21
 8009c30:	d8f6      	bhi.n	8009c20 <_printf_i+0x28>
 8009c32:	a101      	add	r1, pc, #4	; (adr r1, 8009c38 <_printf_i+0x40>)
 8009c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c38:	08009c91 	.word	0x08009c91
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009c21 	.word	0x08009c21
 8009c44:	08009c21 	.word	0x08009c21
 8009c48:	08009c21 	.word	0x08009c21
 8009c4c:	08009c21 	.word	0x08009c21
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009c21 	.word	0x08009c21
 8009c58:	08009c21 	.word	0x08009c21
 8009c5c:	08009c21 	.word	0x08009c21
 8009c60:	08009c21 	.word	0x08009c21
 8009c64:	08009db3 	.word	0x08009db3
 8009c68:	08009cd5 	.word	0x08009cd5
 8009c6c:	08009d95 	.word	0x08009d95
 8009c70:	08009c21 	.word	0x08009c21
 8009c74:	08009c21 	.word	0x08009c21
 8009c78:	08009dd5 	.word	0x08009dd5
 8009c7c:	08009c21 	.word	0x08009c21
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009c21 	.word	0x08009c21
 8009c88:	08009c21 	.word	0x08009c21
 8009c8c:	08009d9d 	.word	0x08009d9d
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	1d1a      	adds	r2, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0a4      	b.n	8009dee <_printf_i+0x1f6>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	6829      	ldr	r1, [r5, #0]
 8009ca8:	0606      	lsls	r6, r0, #24
 8009caa:	f101 0304 	add.w	r3, r1, #4
 8009cae:	d50a      	bpl.n	8009cc6 <_printf_i+0xce>
 8009cb0:	680e      	ldr	r6, [r1, #0]
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	da03      	bge.n	8009cc0 <_printf_i+0xc8>
 8009cb8:	232d      	movs	r3, #45	; 0x2d
 8009cba:	4276      	negs	r6, r6
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc0:	230a      	movs	r3, #10
 8009cc2:	485e      	ldr	r0, [pc, #376]	; (8009e3c <_printf_i+0x244>)
 8009cc4:	e019      	b.n	8009cfa <_printf_i+0x102>
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	bf18      	it	ne
 8009cd0:	b236      	sxthne	r6, r6
 8009cd2:	e7ef      	b.n	8009cb4 <_printf_i+0xbc>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	6029      	str	r1, [r5, #0]
 8009cdc:	0601      	lsls	r1, r0, #24
 8009cde:	d501      	bpl.n	8009ce4 <_printf_i+0xec>
 8009ce0:	681e      	ldr	r6, [r3, #0]
 8009ce2:	e002      	b.n	8009cea <_printf_i+0xf2>
 8009ce4:	0646      	lsls	r6, r0, #25
 8009ce6:	d5fb      	bpl.n	8009ce0 <_printf_i+0xe8>
 8009ce8:	881e      	ldrh	r6, [r3, #0]
 8009cea:	2f6f      	cmp	r7, #111	; 0x6f
 8009cec:	bf0c      	ite	eq
 8009cee:	2308      	moveq	r3, #8
 8009cf0:	230a      	movne	r3, #10
 8009cf2:	4852      	ldr	r0, [pc, #328]	; (8009e3c <_printf_i+0x244>)
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cfa:	6865      	ldr	r5, [r4, #4]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	bfa8      	it	ge
 8009d00:	6821      	ldrge	r1, [r4, #0]
 8009d02:	60a5      	str	r5, [r4, #8]
 8009d04:	bfa4      	itt	ge
 8009d06:	f021 0104 	bicge.w	r1, r1, #4
 8009d0a:	6021      	strge	r1, [r4, #0]
 8009d0c:	b90e      	cbnz	r6, 8009d12 <_printf_i+0x11a>
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	d04d      	beq.n	8009dae <_printf_i+0x1b6>
 8009d12:	4615      	mov	r5, r2
 8009d14:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d18:	fb03 6711 	mls	r7, r3, r1, r6
 8009d1c:	5dc7      	ldrb	r7, [r0, r7]
 8009d1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d22:	4637      	mov	r7, r6
 8009d24:	42bb      	cmp	r3, r7
 8009d26:	460e      	mov	r6, r1
 8009d28:	d9f4      	bls.n	8009d14 <_printf_i+0x11c>
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d10b      	bne.n	8009d46 <_printf_i+0x14e>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	07de      	lsls	r6, r3, #31
 8009d32:	d508      	bpl.n	8009d46 <_printf_i+0x14e>
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	6861      	ldr	r1, [r4, #4]
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	bfde      	ittt	le
 8009d3c:	2330      	movle	r3, #48	; 0x30
 8009d3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d46:	1b52      	subs	r2, r2, r5
 8009d48:	6122      	str	r2, [r4, #16]
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f8cd a000 	str.w	sl, [sp]
 8009d54:	aa03      	add	r2, sp, #12
 8009d56:	f7ff fedf 	bl	8009b18 <_printf_common>
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d14c      	bne.n	8009df8 <_printf_i+0x200>
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	b004      	add	sp, #16
 8009d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d68:	4834      	ldr	r0, [pc, #208]	; (8009e3c <_printf_i+0x244>)
 8009d6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d6e:	6829      	ldr	r1, [r5, #0]
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d76:	6029      	str	r1, [r5, #0]
 8009d78:	061d      	lsls	r5, r3, #24
 8009d7a:	d514      	bpl.n	8009da6 <_printf_i+0x1ae>
 8009d7c:	07df      	lsls	r7, r3, #31
 8009d7e:	bf44      	itt	mi
 8009d80:	f043 0320 	orrmi.w	r3, r3, #32
 8009d84:	6023      	strmi	r3, [r4, #0]
 8009d86:	b91e      	cbnz	r6, 8009d90 <_printf_i+0x198>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	f023 0320 	bic.w	r3, r3, #32
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	2310      	movs	r3, #16
 8009d92:	e7af      	b.n	8009cf4 <_printf_i+0xfc>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	f043 0320 	orr.w	r3, r3, #32
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	2378      	movs	r3, #120	; 0x78
 8009d9e:	4828      	ldr	r0, [pc, #160]	; (8009e40 <_printf_i+0x248>)
 8009da0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da4:	e7e3      	b.n	8009d6e <_printf_i+0x176>
 8009da6:	0659      	lsls	r1, r3, #25
 8009da8:	bf48      	it	mi
 8009daa:	b2b6      	uxthmi	r6, r6
 8009dac:	e7e6      	b.n	8009d7c <_printf_i+0x184>
 8009dae:	4615      	mov	r5, r2
 8009db0:	e7bb      	b.n	8009d2a <_printf_i+0x132>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	6826      	ldr	r6, [r4, #0]
 8009db6:	1d18      	adds	r0, r3, #4
 8009db8:	6961      	ldr	r1, [r4, #20]
 8009dba:	6028      	str	r0, [r5, #0]
 8009dbc:	0635      	lsls	r5, r6, #24
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	d501      	bpl.n	8009dc6 <_printf_i+0x1ce>
 8009dc2:	6019      	str	r1, [r3, #0]
 8009dc4:	e002      	b.n	8009dcc <_printf_i+0x1d4>
 8009dc6:	0670      	lsls	r0, r6, #25
 8009dc8:	d5fb      	bpl.n	8009dc2 <_printf_i+0x1ca>
 8009dca:	8019      	strh	r1, [r3, #0]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4615      	mov	r5, r2
 8009dd0:	6123      	str	r3, [r4, #16]
 8009dd2:	e7ba      	b.n	8009d4a <_printf_i+0x152>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	1d1a      	adds	r2, r3, #4
 8009dda:	602a      	str	r2, [r5, #0]
 8009ddc:	681d      	ldr	r5, [r3, #0]
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f82f 	bl	8009e44 <memchr>
 8009de6:	b108      	cbz	r0, 8009dec <_printf_i+0x1f4>
 8009de8:	1b40      	subs	r0, r0, r5
 8009dea:	6060      	str	r0, [r4, #4]
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	2300      	movs	r3, #0
 8009df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df6:	e7a8      	b.n	8009d4a <_printf_i+0x152>
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	47d0      	blx	sl
 8009e02:	3001      	adds	r0, #1
 8009e04:	d0ab      	beq.n	8009d5e <_printf_i+0x166>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	079b      	lsls	r3, r3, #30
 8009e0a:	d413      	bmi.n	8009e34 <_printf_i+0x23c>
 8009e0c:	68e0      	ldr	r0, [r4, #12]
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	4298      	cmp	r0, r3
 8009e12:	bfb8      	it	lt
 8009e14:	4618      	movlt	r0, r3
 8009e16:	e7a4      	b.n	8009d62 <_printf_i+0x16a>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4640      	mov	r0, r8
 8009e20:	47d0      	blx	sl
 8009e22:	3001      	adds	r0, #1
 8009e24:	d09b      	beq.n	8009d5e <_printf_i+0x166>
 8009e26:	3501      	adds	r5, #1
 8009e28:	68e3      	ldr	r3, [r4, #12]
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	1a5b      	subs	r3, r3, r1
 8009e2e:	42ab      	cmp	r3, r5
 8009e30:	dcf2      	bgt.n	8009e18 <_printf_i+0x220>
 8009e32:	e7eb      	b.n	8009e0c <_printf_i+0x214>
 8009e34:	2500      	movs	r5, #0
 8009e36:	f104 0619 	add.w	r6, r4, #25
 8009e3a:	e7f5      	b.n	8009e28 <_printf_i+0x230>
 8009e3c:	0800a259 	.word	0x0800a259
 8009e40:	0800a26a 	.word	0x0800a26a

08009e44 <memchr>:
 8009e44:	4603      	mov	r3, r0
 8009e46:	b510      	push	{r4, lr}
 8009e48:	b2c9      	uxtb	r1, r1
 8009e4a:	4402      	add	r2, r0
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	d101      	bne.n	8009e56 <memchr+0x12>
 8009e52:	2000      	movs	r0, #0
 8009e54:	e003      	b.n	8009e5e <memchr+0x1a>
 8009e56:	7804      	ldrb	r4, [r0, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	428c      	cmp	r4, r1
 8009e5c:	d1f6      	bne.n	8009e4c <memchr+0x8>
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <memcpy>:
 8009e60:	440a      	add	r2, r1
 8009e62:	4291      	cmp	r1, r2
 8009e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e68:	d100      	bne.n	8009e6c <memcpy+0xc>
 8009e6a:	4770      	bx	lr
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e72:	4291      	cmp	r1, r2
 8009e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e78:	d1f9      	bne.n	8009e6e <memcpy+0xe>
 8009e7a:	bd10      	pop	{r4, pc}

08009e7c <memmove>:
 8009e7c:	4288      	cmp	r0, r1
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	eb01 0402 	add.w	r4, r1, r2
 8009e84:	d902      	bls.n	8009e8c <memmove+0x10>
 8009e86:	4284      	cmp	r4, r0
 8009e88:	4623      	mov	r3, r4
 8009e8a:	d807      	bhi.n	8009e9c <memmove+0x20>
 8009e8c:	1e43      	subs	r3, r0, #1
 8009e8e:	42a1      	cmp	r1, r4
 8009e90:	d008      	beq.n	8009ea4 <memmove+0x28>
 8009e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e9a:	e7f8      	b.n	8009e8e <memmove+0x12>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4402      	add	r2, r0
 8009ea0:	428a      	cmp	r2, r1
 8009ea2:	d100      	bne.n	8009ea6 <memmove+0x2a>
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eae:	e7f7      	b.n	8009ea0 <memmove+0x24>

08009eb0 <_free_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d040      	beq.n	8009f3a <_free_r+0x8a>
 8009eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebc:	1f0c      	subs	r4, r1, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	18e4      	addlt	r4, r4, r3
 8009ec4:	f000 f910 	bl	800a0e8 <__malloc_lock>
 8009ec8:	4a1c      	ldr	r2, [pc, #112]	; (8009f3c <_free_r+0x8c>)
 8009eca:	6813      	ldr	r3, [r2, #0]
 8009ecc:	b933      	cbnz	r3, 8009edc <_free_r+0x2c>
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	6014      	str	r4, [r2, #0]
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed8:	f000 b90c 	b.w	800a0f4 <__malloc_unlock>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d908      	bls.n	8009ef2 <_free_r+0x42>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	1821      	adds	r1, r4, r0
 8009ee4:	428b      	cmp	r3, r1
 8009ee6:	bf01      	itttt	eq
 8009ee8:	6819      	ldreq	r1, [r3, #0]
 8009eea:	685b      	ldreq	r3, [r3, #4]
 8009eec:	1809      	addeq	r1, r1, r0
 8009eee:	6021      	streq	r1, [r4, #0]
 8009ef0:	e7ed      	b.n	8009ece <_free_r+0x1e>
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	b10b      	cbz	r3, 8009efc <_free_r+0x4c>
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d9fa      	bls.n	8009ef2 <_free_r+0x42>
 8009efc:	6811      	ldr	r1, [r2, #0]
 8009efe:	1850      	adds	r0, r2, r1
 8009f00:	42a0      	cmp	r0, r4
 8009f02:	d10b      	bne.n	8009f1c <_free_r+0x6c>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	4401      	add	r1, r0
 8009f08:	1850      	adds	r0, r2, r1
 8009f0a:	4283      	cmp	r3, r0
 8009f0c:	6011      	str	r1, [r2, #0]
 8009f0e:	d1e0      	bne.n	8009ed2 <_free_r+0x22>
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4401      	add	r1, r0
 8009f16:	6011      	str	r1, [r2, #0]
 8009f18:	6053      	str	r3, [r2, #4]
 8009f1a:	e7da      	b.n	8009ed2 <_free_r+0x22>
 8009f1c:	d902      	bls.n	8009f24 <_free_r+0x74>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	e7d6      	b.n	8009ed2 <_free_r+0x22>
 8009f24:	6820      	ldr	r0, [r4, #0]
 8009f26:	1821      	adds	r1, r4, r0
 8009f28:	428b      	cmp	r3, r1
 8009f2a:	bf01      	itttt	eq
 8009f2c:	6819      	ldreq	r1, [r3, #0]
 8009f2e:	685b      	ldreq	r3, [r3, #4]
 8009f30:	1809      	addeq	r1, r1, r0
 8009f32:	6021      	streq	r1, [r4, #0]
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	6054      	str	r4, [r2, #4]
 8009f38:	e7cb      	b.n	8009ed2 <_free_r+0x22>
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20000b38 	.word	0x20000b38

08009f40 <sbrk_aligned>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4e0e      	ldr	r6, [pc, #56]	; (8009f7c <sbrk_aligned+0x3c>)
 8009f44:	460c      	mov	r4, r1
 8009f46:	6831      	ldr	r1, [r6, #0]
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b911      	cbnz	r1, 8009f52 <sbrk_aligned+0x12>
 8009f4c:	f000 f8bc 	bl	800a0c8 <_sbrk_r>
 8009f50:	6030      	str	r0, [r6, #0]
 8009f52:	4621      	mov	r1, r4
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 f8b7 	bl	800a0c8 <_sbrk_r>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d00a      	beq.n	8009f74 <sbrk_aligned+0x34>
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d007      	beq.n	8009f78 <sbrk_aligned+0x38>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 f8ac 	bl	800a0c8 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d101      	bne.n	8009f78 <sbrk_aligned+0x38>
 8009f74:	f04f 34ff 	mov.w	r4, #4294967295
 8009f78:	4620      	mov	r0, r4
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	20000b3c 	.word	0x20000b3c

08009f80 <_malloc_r>:
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	1ccd      	adds	r5, r1, #3
 8009f86:	f025 0503 	bic.w	r5, r5, #3
 8009f8a:	3508      	adds	r5, #8
 8009f8c:	2d0c      	cmp	r5, #12
 8009f8e:	bf38      	it	cc
 8009f90:	250c      	movcc	r5, #12
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	4607      	mov	r7, r0
 8009f96:	db01      	blt.n	8009f9c <_malloc_r+0x1c>
 8009f98:	42a9      	cmp	r1, r5
 8009f9a:	d905      	bls.n	8009fa8 <_malloc_r+0x28>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	2600      	movs	r6, #0
 8009fa0:	603b      	str	r3, [r7, #0]
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	4e2e      	ldr	r6, [pc, #184]	; (800a064 <_malloc_r+0xe4>)
 8009faa:	f000 f89d 	bl	800a0e8 <__malloc_lock>
 8009fae:	6833      	ldr	r3, [r6, #0]
 8009fb0:	461c      	mov	r4, r3
 8009fb2:	bb34      	cbnz	r4, 800a002 <_malloc_r+0x82>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7ff ffc2 	bl	8009f40 <sbrk_aligned>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	d14d      	bne.n	800a05e <_malloc_r+0xde>
 8009fc2:	6834      	ldr	r4, [r6, #0]
 8009fc4:	4626      	mov	r6, r4
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d140      	bne.n	800a04c <_malloc_r+0xcc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4638      	mov	r0, r7
 8009fd0:	eb04 0803 	add.w	r8, r4, r3
 8009fd4:	f000 f878 	bl	800a0c8 <_sbrk_r>
 8009fd8:	4580      	cmp	r8, r0
 8009fda:	d13a      	bne.n	800a052 <_malloc_r+0xd2>
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	3503      	adds	r5, #3
 8009fe0:	1a6d      	subs	r5, r5, r1
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	4638      	mov	r0, r7
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7ff ffa5 	bl	8009f40 <sbrk_aligned>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d02b      	beq.n	800a052 <_malloc_r+0xd2>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	442b      	add	r3, r5
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	e00e      	b.n	800a020 <_malloc_r+0xa0>
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	1b52      	subs	r2, r2, r5
 800a006:	d41e      	bmi.n	800a046 <_malloc_r+0xc6>
 800a008:	2a0b      	cmp	r2, #11
 800a00a:	d916      	bls.n	800a03a <_malloc_r+0xba>
 800a00c:	1961      	adds	r1, r4, r5
 800a00e:	42a3      	cmp	r3, r4
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	bf18      	it	ne
 800a014:	6059      	strne	r1, [r3, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	bf08      	it	eq
 800a01a:	6031      	streq	r1, [r6, #0]
 800a01c:	5162      	str	r2, [r4, r5]
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	4638      	mov	r0, r7
 800a022:	f104 060b 	add.w	r6, r4, #11
 800a026:	f000 f865 	bl	800a0f4 <__malloc_unlock>
 800a02a:	f026 0607 	bic.w	r6, r6, #7
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	1af2      	subs	r2, r6, r3
 800a032:	d0b6      	beq.n	8009fa2 <_malloc_r+0x22>
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	50a3      	str	r3, [r4, r2]
 800a038:	e7b3      	b.n	8009fa2 <_malloc_r+0x22>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	bf0c      	ite	eq
 800a040:	6032      	streq	r2, [r6, #0]
 800a042:	605a      	strne	r2, [r3, #4]
 800a044:	e7ec      	b.n	800a020 <_malloc_r+0xa0>
 800a046:	4623      	mov	r3, r4
 800a048:	6864      	ldr	r4, [r4, #4]
 800a04a:	e7b2      	b.n	8009fb2 <_malloc_r+0x32>
 800a04c:	4634      	mov	r4, r6
 800a04e:	6876      	ldr	r6, [r6, #4]
 800a050:	e7b9      	b.n	8009fc6 <_malloc_r+0x46>
 800a052:	230c      	movs	r3, #12
 800a054:	4638      	mov	r0, r7
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	f000 f84c 	bl	800a0f4 <__malloc_unlock>
 800a05c:	e7a1      	b.n	8009fa2 <_malloc_r+0x22>
 800a05e:	6025      	str	r5, [r4, #0]
 800a060:	e7de      	b.n	800a020 <_malloc_r+0xa0>
 800a062:	bf00      	nop
 800a064:	20000b38 	.word	0x20000b38

0800a068 <_realloc_r>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	4680      	mov	r8, r0
 800a06e:	4614      	mov	r4, r2
 800a070:	460e      	mov	r6, r1
 800a072:	b921      	cbnz	r1, 800a07e <_realloc_r+0x16>
 800a074:	4611      	mov	r1, r2
 800a076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	f7ff bf81 	b.w	8009f80 <_malloc_r>
 800a07e:	b92a      	cbnz	r2, 800a08c <_realloc_r+0x24>
 800a080:	f7ff ff16 	bl	8009eb0 <_free_r>
 800a084:	4625      	mov	r5, r4
 800a086:	4628      	mov	r0, r5
 800a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08c:	f000 f838 	bl	800a100 <_malloc_usable_size_r>
 800a090:	4284      	cmp	r4, r0
 800a092:	4607      	mov	r7, r0
 800a094:	d802      	bhi.n	800a09c <_realloc_r+0x34>
 800a096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09a:	d812      	bhi.n	800a0c2 <_realloc_r+0x5a>
 800a09c:	4621      	mov	r1, r4
 800a09e:	4640      	mov	r0, r8
 800a0a0:	f7ff ff6e 	bl	8009f80 <_malloc_r>
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0ed      	beq.n	800a086 <_realloc_r+0x1e>
 800a0aa:	42bc      	cmp	r4, r7
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	bf28      	it	cs
 800a0b2:	463a      	movcs	r2, r7
 800a0b4:	f7ff fed4 	bl	8009e60 <memcpy>
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fef8 	bl	8009eb0 <_free_r>
 800a0c0:	e7e1      	b.n	800a086 <_realloc_r+0x1e>
 800a0c2:	4635      	mov	r5, r6
 800a0c4:	e7df      	b.n	800a086 <_realloc_r+0x1e>
	...

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4d05      	ldr	r5, [pc, #20]	; (800a0e4 <_sbrk_r+0x1c>)
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f6 fcd0 	bl	8000a78 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000b40 	.word	0x20000b40

0800a0e8 <__malloc_lock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	; (800a0f0 <__malloc_lock+0x8>)
 800a0ea:	f000 b811 	b.w	800a110 <__retarget_lock_acquire_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	20000b44 	.word	0x20000b44

0800a0f4 <__malloc_unlock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_unlock+0x8>)
 800a0f6:	f000 b80c 	b.w	800a112 <__retarget_lock_release_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20000b44 	.word	0x20000b44

0800a100 <_malloc_usable_size_r>:
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f18      	subs	r0, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfbc      	itt	lt
 800a10a:	580b      	ldrlt	r3, [r1, r0]
 800a10c:	18c0      	addlt	r0, r0, r3
 800a10e:	4770      	bx	lr

0800a110 <__retarget_lock_acquire_recursive>:
 800a110:	4770      	bx	lr

0800a112 <__retarget_lock_release_recursive>:
 800a112:	4770      	bx	lr

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
